// Code generated by thriftrw-plugin-yarpc
// @generated

package dosaserver

import (
	"context"
	"github.com/uber-go/dosa-idl/.gen/dosa"
	"go.uber.org/thriftrw/wire"
	"go.uber.org/yarpc/api/transport"
	"go.uber.org/yarpc/encoding/thrift"
)

// Interface is the server-side interface for the Dosa service.
type Interface interface {
	CanUpsertSchema(
		ctx context.Context,
		Request *dosa.CanUpsertSchemaRequest,
	) (*dosa.CanUpsertSchemaResponse, error)

	CheckSchema(
		ctx context.Context,
		Request *dosa.CheckSchemaRequest,
	) (*dosa.CheckSchemaResponse, error)

	CheckSchemaStatus(
		ctx context.Context,
		Request *dosa.CheckSchemaStatusRequest,
	) (*dosa.CheckSchemaStatusResponse, error)

	CreateIfNotExists(
		ctx context.Context,
		Request *dosa.CreateRequest,
	) error

	CreateScope(
		ctx context.Context,
		Request *dosa.CreateScopeRequest,
	) error

	DropScope(
		ctx context.Context,
		Request *dosa.DropScopeRequest,
	) error

	MultiRead(
		ctx context.Context,
		Request *dosa.MultiReadRequest,
	) (*dosa.MultiReadResponse, error)

	MultiRemove(
		ctx context.Context,
		Request *dosa.MultiRemoveRequest,
	) (*dosa.MultiRemoveResponse, error)

	MultiUpsert(
		ctx context.Context,
		Request *dosa.MultiUpsertRequest,
	) (*dosa.MultiUpsertResponse, error)

	Range(
		ctx context.Context,
		Request *dosa.RangeRequest,
	) (*dosa.RangeResponse, error)

	Read(
		ctx context.Context,
		Request *dosa.ReadRequest,
	) (*dosa.ReadResponse, error)

	Remove(
		ctx context.Context,
		Request *dosa.RemoveRequest,
	) error

	RemoveRange(
		ctx context.Context,
		Request *dosa.RemoveRangeRequest,
	) error

	Scan(
		ctx context.Context,
		Request *dosa.ScanRequest,
	) (*dosa.ScanResponse, error)

	ScopeExists(
		ctx context.Context,
		Request *dosa.ScopeExistsRequest,
	) (*dosa.ScopeExistsResponse, error)

	Search(
		ctx context.Context,
		Request *dosa.SearchRequest,
	) (*dosa.SearchResponse, error)

	TruncateScope(
		ctx context.Context,
		Request *dosa.TruncateScopeRequest,
	) error

	Upsert(
		ctx context.Context,
		Request *dosa.UpsertRequest,
	) error

	UpsertSchema(
		ctx context.Context,
		Request *dosa.UpsertSchemaRequest,
	) (*dosa.UpsertSchemaResponse, error)
}

// New prepares an implementation of the Dosa service for
// registration.
//
// 	handler := DosaHandler{}
// 	dispatcher.Register(dosaserver.New(handler))
func New(impl Interface, opts ...thrift.RegisterOption) []transport.Procedure {
	h := handler{impl}
	service := thrift.Service{
		Name: "Dosa",
		Methods: []thrift.Method{

			thrift.Method{
				Name: "canUpsertSchema",
				HandlerSpec: thrift.HandlerSpec{

					Type:  transport.Unary,
					Unary: thrift.UnaryHandler(h.CanUpsertSchema),
				},
				Signature:    "CanUpsertSchema(Request *dosa.CanUpsertSchemaRequest) (*dosa.CanUpsertSchemaResponse)",
				ThriftModule: dosa.ThriftModule,
			},

			thrift.Method{
				Name: "checkSchema",
				HandlerSpec: thrift.HandlerSpec{

					Type:  transport.Unary,
					Unary: thrift.UnaryHandler(h.CheckSchema),
				},
				Signature:    "CheckSchema(Request *dosa.CheckSchemaRequest) (*dosa.CheckSchemaResponse)",
				ThriftModule: dosa.ThriftModule,
			},

			thrift.Method{
				Name: "checkSchemaStatus",
				HandlerSpec: thrift.HandlerSpec{

					Type:  transport.Unary,
					Unary: thrift.UnaryHandler(h.CheckSchemaStatus),
				},
				Signature:    "CheckSchemaStatus(Request *dosa.CheckSchemaStatusRequest) (*dosa.CheckSchemaStatusResponse)",
				ThriftModule: dosa.ThriftModule,
			},

			thrift.Method{
				Name: "createIfNotExists",
				HandlerSpec: thrift.HandlerSpec{

					Type:  transport.Unary,
					Unary: thrift.UnaryHandler(h.CreateIfNotExists),
				},
				Signature:    "CreateIfNotExists(Request *dosa.CreateRequest)",
				ThriftModule: dosa.ThriftModule,
			},

			thrift.Method{
				Name: "createScope",
				HandlerSpec: thrift.HandlerSpec{

					Type:  transport.Unary,
					Unary: thrift.UnaryHandler(h.CreateScope),
				},
				Signature:    "CreateScope(Request *dosa.CreateScopeRequest)",
				ThriftModule: dosa.ThriftModule,
			},

			thrift.Method{
				Name: "dropScope",
				HandlerSpec: thrift.HandlerSpec{

					Type:  transport.Unary,
					Unary: thrift.UnaryHandler(h.DropScope),
				},
				Signature:    "DropScope(Request *dosa.DropScopeRequest)",
				ThriftModule: dosa.ThriftModule,
			},

			thrift.Method{
				Name: "multiRead",
				HandlerSpec: thrift.HandlerSpec{

					Type:  transport.Unary,
					Unary: thrift.UnaryHandler(h.MultiRead),
				},
				Signature:    "MultiRead(Request *dosa.MultiReadRequest) (*dosa.MultiReadResponse)",
				ThriftModule: dosa.ThriftModule,
			},

			thrift.Method{
				Name: "multiRemove",
				HandlerSpec: thrift.HandlerSpec{

					Type:  transport.Unary,
					Unary: thrift.UnaryHandler(h.MultiRemove),
				},
				Signature:    "MultiRemove(Request *dosa.MultiRemoveRequest) (*dosa.MultiRemoveResponse)",
				ThriftModule: dosa.ThriftModule,
			},

			thrift.Method{
				Name: "multiUpsert",
				HandlerSpec: thrift.HandlerSpec{

					Type:  transport.Unary,
					Unary: thrift.UnaryHandler(h.MultiUpsert),
				},
				Signature:    "MultiUpsert(Request *dosa.MultiUpsertRequest) (*dosa.MultiUpsertResponse)",
				ThriftModule: dosa.ThriftModule,
			},

			thrift.Method{
				Name: "range",
				HandlerSpec: thrift.HandlerSpec{

					Type:  transport.Unary,
					Unary: thrift.UnaryHandler(h.Range),
				},
				Signature:    "Range(Request *dosa.RangeRequest) (*dosa.RangeResponse)",
				ThriftModule: dosa.ThriftModule,
			},

			thrift.Method{
				Name: "read",
				HandlerSpec: thrift.HandlerSpec{

					Type:  transport.Unary,
					Unary: thrift.UnaryHandler(h.Read),
				},
				Signature:    "Read(Request *dosa.ReadRequest) (*dosa.ReadResponse)",
				ThriftModule: dosa.ThriftModule,
			},

			thrift.Method{
				Name: "remove",
				HandlerSpec: thrift.HandlerSpec{

					Type:  transport.Unary,
					Unary: thrift.UnaryHandler(h.Remove),
				},
				Signature:    "Remove(Request *dosa.RemoveRequest)",
				ThriftModule: dosa.ThriftModule,
			},

			thrift.Method{
				Name: "removeRange",
				HandlerSpec: thrift.HandlerSpec{

					Type:  transport.Unary,
					Unary: thrift.UnaryHandler(h.RemoveRange),
				},
				Signature:    "RemoveRange(Request *dosa.RemoveRangeRequest)",
				ThriftModule: dosa.ThriftModule,
			},

			thrift.Method{
				Name: "scan",
				HandlerSpec: thrift.HandlerSpec{

					Type:  transport.Unary,
					Unary: thrift.UnaryHandler(h.Scan),
				},
				Signature:    "Scan(Request *dosa.ScanRequest) (*dosa.ScanResponse)",
				ThriftModule: dosa.ThriftModule,
			},

			thrift.Method{
				Name: "scopeExists",
				HandlerSpec: thrift.HandlerSpec{

					Type:  transport.Unary,
					Unary: thrift.UnaryHandler(h.ScopeExists),
				},
				Signature:    "ScopeExists(Request *dosa.ScopeExistsRequest) (*dosa.ScopeExistsResponse)",
				ThriftModule: dosa.ThriftModule,
			},

			thrift.Method{
				Name: "search",
				HandlerSpec: thrift.HandlerSpec{

					Type:  transport.Unary,
					Unary: thrift.UnaryHandler(h.Search),
				},
				Signature:    "Search(Request *dosa.SearchRequest) (*dosa.SearchResponse)",
				ThriftModule: dosa.ThriftModule,
			},

			thrift.Method{
				Name: "truncateScope",
				HandlerSpec: thrift.HandlerSpec{

					Type:  transport.Unary,
					Unary: thrift.UnaryHandler(h.TruncateScope),
				},
				Signature:    "TruncateScope(Request *dosa.TruncateScopeRequest)",
				ThriftModule: dosa.ThriftModule,
			},

			thrift.Method{
				Name: "upsert",
				HandlerSpec: thrift.HandlerSpec{

					Type:  transport.Unary,
					Unary: thrift.UnaryHandler(h.Upsert),
				},
				Signature:    "Upsert(Request *dosa.UpsertRequest)",
				ThriftModule: dosa.ThriftModule,
			},

			thrift.Method{
				Name: "upsertSchema",
				HandlerSpec: thrift.HandlerSpec{

					Type:  transport.Unary,
					Unary: thrift.UnaryHandler(h.UpsertSchema),
				},
				Signature:    "UpsertSchema(Request *dosa.UpsertSchemaRequest) (*dosa.UpsertSchemaResponse)",
				ThriftModule: dosa.ThriftModule,
			},
		},
	}

	procedures := make([]transport.Procedure, 0, 19)
	procedures = append(procedures, thrift.BuildProcedures(service, opts...)...)
	return procedures
}

type handler struct{ impl Interface }

func (h handler) CanUpsertSchema(ctx context.Context, body wire.Value) (thrift.Response, error) {
	var args dosa.Dosa_CanUpsertSchema_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	success, err := h.impl.CanUpsertSchema(ctx, args.Request)

	hadError := err != nil
	result, err := dosa.Dosa_CanUpsertSchema_Helper.WrapResponse(success, err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Body = result
	}
	return response, err
}

func (h handler) CheckSchema(ctx context.Context, body wire.Value) (thrift.Response, error) {
	var args dosa.Dosa_CheckSchema_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	success, err := h.impl.CheckSchema(ctx, args.Request)

	hadError := err != nil
	result, err := dosa.Dosa_CheckSchema_Helper.WrapResponse(success, err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Body = result
	}
	return response, err
}

func (h handler) CheckSchemaStatus(ctx context.Context, body wire.Value) (thrift.Response, error) {
	var args dosa.Dosa_CheckSchemaStatus_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	success, err := h.impl.CheckSchemaStatus(ctx, args.Request)

	hadError := err != nil
	result, err := dosa.Dosa_CheckSchemaStatus_Helper.WrapResponse(success, err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Body = result
	}
	return response, err
}

func (h handler) CreateIfNotExists(ctx context.Context, body wire.Value) (thrift.Response, error) {
	var args dosa.Dosa_CreateIfNotExists_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	err := h.impl.CreateIfNotExists(ctx, args.Request)

	hadError := err != nil
	result, err := dosa.Dosa_CreateIfNotExists_Helper.WrapResponse(err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Body = result
	}
	return response, err
}

func (h handler) CreateScope(ctx context.Context, body wire.Value) (thrift.Response, error) {
	var args dosa.Dosa_CreateScope_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	err := h.impl.CreateScope(ctx, args.Request)

	hadError := err != nil
	result, err := dosa.Dosa_CreateScope_Helper.WrapResponse(err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Body = result
	}
	return response, err
}

func (h handler) DropScope(ctx context.Context, body wire.Value) (thrift.Response, error) {
	var args dosa.Dosa_DropScope_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	err := h.impl.DropScope(ctx, args.Request)

	hadError := err != nil
	result, err := dosa.Dosa_DropScope_Helper.WrapResponse(err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Body = result
	}
	return response, err
}

func (h handler) MultiRead(ctx context.Context, body wire.Value) (thrift.Response, error) {
	var args dosa.Dosa_MultiRead_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	success, err := h.impl.MultiRead(ctx, args.Request)

	hadError := err != nil
	result, err := dosa.Dosa_MultiRead_Helper.WrapResponse(success, err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Body = result
	}
	return response, err
}

func (h handler) MultiRemove(ctx context.Context, body wire.Value) (thrift.Response, error) {
	var args dosa.Dosa_MultiRemove_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	success, err := h.impl.MultiRemove(ctx, args.Request)

	hadError := err != nil
	result, err := dosa.Dosa_MultiRemove_Helper.WrapResponse(success, err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Body = result
	}
	return response, err
}

func (h handler) MultiUpsert(ctx context.Context, body wire.Value) (thrift.Response, error) {
	var args dosa.Dosa_MultiUpsert_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	success, err := h.impl.MultiUpsert(ctx, args.Request)

	hadError := err != nil
	result, err := dosa.Dosa_MultiUpsert_Helper.WrapResponse(success, err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Body = result
	}
	return response, err
}

func (h handler) Range(ctx context.Context, body wire.Value) (thrift.Response, error) {
	var args dosa.Dosa_Range_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	success, err := h.impl.Range(ctx, args.Request)

	hadError := err != nil
	result, err := dosa.Dosa_Range_Helper.WrapResponse(success, err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Body = result
	}
	return response, err
}

func (h handler) Read(ctx context.Context, body wire.Value) (thrift.Response, error) {
	var args dosa.Dosa_Read_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	success, err := h.impl.Read(ctx, args.Request)

	hadError := err != nil
	result, err := dosa.Dosa_Read_Helper.WrapResponse(success, err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Body = result
	}
	return response, err
}

func (h handler) Remove(ctx context.Context, body wire.Value) (thrift.Response, error) {
	var args dosa.Dosa_Remove_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	err := h.impl.Remove(ctx, args.Request)

	hadError := err != nil
	result, err := dosa.Dosa_Remove_Helper.WrapResponse(err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Body = result
	}
	return response, err
}

func (h handler) RemoveRange(ctx context.Context, body wire.Value) (thrift.Response, error) {
	var args dosa.Dosa_RemoveRange_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	err := h.impl.RemoveRange(ctx, args.Request)

	hadError := err != nil
	result, err := dosa.Dosa_RemoveRange_Helper.WrapResponse(err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Body = result
	}
	return response, err
}

func (h handler) Scan(ctx context.Context, body wire.Value) (thrift.Response, error) {
	var args dosa.Dosa_Scan_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	success, err := h.impl.Scan(ctx, args.Request)

	hadError := err != nil
	result, err := dosa.Dosa_Scan_Helper.WrapResponse(success, err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Body = result
	}
	return response, err
}

func (h handler) ScopeExists(ctx context.Context, body wire.Value) (thrift.Response, error) {
	var args dosa.Dosa_ScopeExists_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	success, err := h.impl.ScopeExists(ctx, args.Request)

	hadError := err != nil
	result, err := dosa.Dosa_ScopeExists_Helper.WrapResponse(success, err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Body = result
	}
	return response, err
}

func (h handler) Search(ctx context.Context, body wire.Value) (thrift.Response, error) {
	var args dosa.Dosa_Search_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	success, err := h.impl.Search(ctx, args.Request)

	hadError := err != nil
	result, err := dosa.Dosa_Search_Helper.WrapResponse(success, err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Body = result
	}
	return response, err
}

func (h handler) TruncateScope(ctx context.Context, body wire.Value) (thrift.Response, error) {
	var args dosa.Dosa_TruncateScope_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	err := h.impl.TruncateScope(ctx, args.Request)

	hadError := err != nil
	result, err := dosa.Dosa_TruncateScope_Helper.WrapResponse(err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Body = result
	}
	return response, err
}

func (h handler) Upsert(ctx context.Context, body wire.Value) (thrift.Response, error) {
	var args dosa.Dosa_Upsert_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	err := h.impl.Upsert(ctx, args.Request)

	hadError := err != nil
	result, err := dosa.Dosa_Upsert_Helper.WrapResponse(err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Body = result
	}
	return response, err
}

func (h handler) UpsertSchema(ctx context.Context, body wire.Value) (thrift.Response, error) {
	var args dosa.Dosa_UpsertSchema_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	success, err := h.impl.UpsertSchema(ctx, args.Request)

	hadError := err != nil
	result, err := dosa.Dosa_UpsertSchema_Helper.WrapResponse(success, err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Body = result
	}
	return response, err
}

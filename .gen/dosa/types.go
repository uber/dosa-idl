// Code generated by thriftrw v1.10.0. DO NOT EDIT.
// @generated

package dosa

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"go.uber.org/thriftrw/wire"
	"math"
	"strconv"
	"strings"
)

type BadRequestError struct {
	Err       string  `json:"err,required"`
	Message   *string `json:"message,omitempty"`
	ErrorCode *int32  `json:"errorCode,omitempty"`
}

// ToWire translates a BadRequestError struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *BadRequestError) ToWire() (wire.Value, error) {
	var (
		fields [3]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	w, err = wire.NewValueString(v.Err), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 1, Value: w}
	i++
	if v.Message != nil {
		w, err = wire.NewValueString(*(v.Message)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}
	if v.ErrorCode != nil {
		w, err = wire.NewValueI32(*(v.ErrorCode)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 3, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a BadRequestError struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a BadRequestError struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v BadRequestError
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *BadRequestError) FromWire(w wire.Value) error {
	var err error

	errIsSet := false

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				v.Err, err = field.Value.GetString(), error(nil)
				if err != nil {
					return err
				}
				errIsSet = true
			}
		case 2:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Message = &x
				if err != nil {
					return err
				}

			}
		case 3:
			if field.Value.Type() == wire.TI32 {
				var x int32
				x, err = field.Value.GetI32(), error(nil)
				v.ErrorCode = &x
				if err != nil {
					return err
				}

			}
		}
	}

	if !errIsSet {
		return errors.New("field Err of BadRequestError is required")
	}

	return nil
}

// String returns a readable string representation of a BadRequestError
// struct.
func (v *BadRequestError) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [3]string
	i := 0
	fields[i] = fmt.Sprintf("Err: %v", v.Err)
	i++
	if v.Message != nil {
		fields[i] = fmt.Sprintf("Message: %v", *(v.Message))
		i++
	}
	if v.ErrorCode != nil {
		fields[i] = fmt.Sprintf("ErrorCode: %v", *(v.ErrorCode))
		i++
	}

	return fmt.Sprintf("BadRequestError{%v}", strings.Join(fields[:i], ", "))
}

func _String_EqualsPtr(lhs, rhs *string) bool {
	if lhs != nil && rhs != nil {

		x := *lhs
		y := *rhs
		return (x == y)
	}
	return lhs == nil && rhs == nil
}

func _I32_EqualsPtr(lhs, rhs *int32) bool {
	if lhs != nil && rhs != nil {

		x := *lhs
		y := *rhs
		return (x == y)
	}
	return lhs == nil && rhs == nil
}

// Equals returns true if all the fields of this BadRequestError match the
// provided BadRequestError.
//
// This function performs a deep comparison.
func (v *BadRequestError) Equals(rhs *BadRequestError) bool {
	if !(v.Err == rhs.Err) {
		return false
	}
	if !_String_EqualsPtr(v.Message, rhs.Message) {
		return false
	}
	if !_I32_EqualsPtr(v.ErrorCode, rhs.ErrorCode) {
		return false
	}

	return true
}

// GetMessage returns the value of Message if it is set or its
// zero value if it is unset.
func (v *BadRequestError) GetMessage() (o string) {
	if v.Message != nil {
		return *v.Message
	}

	return
}

// GetErrorCode returns the value of ErrorCode if it is set or its
// zero value if it is unset.
func (v *BadRequestError) GetErrorCode() (o int32) {
	if v.ErrorCode != nil {
		return *v.ErrorCode
	}

	return
}

func (v *BadRequestError) Error() string {
	return v.String()
}

type BadSchemaError struct {
	Reasons map[string]string `json:"reasons,required"`
}

type _Map_String_String_MapItemList map[string]string

func (m _Map_String_String_MapItemList) ForEach(f func(wire.MapItem) error) error {
	for k, v := range m {
		kw, err := wire.NewValueString(k), error(nil)
		if err != nil {
			return err
		}

		vw, err := wire.NewValueString(v), error(nil)
		if err != nil {
			return err
		}
		err = f(wire.MapItem{Key: kw, Value: vw})
		if err != nil {
			return err
		}
	}
	return nil
}

func (m _Map_String_String_MapItemList) Size() int {
	return len(m)
}

func (_Map_String_String_MapItemList) KeyType() wire.Type {
	return wire.TBinary
}

func (_Map_String_String_MapItemList) ValueType() wire.Type {
	return wire.TBinary
}

func (_Map_String_String_MapItemList) Close() {}

// ToWire translates a BadSchemaError struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *BadSchemaError) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Reasons == nil {
		return w, errors.New("field Reasons of BadSchemaError is required")
	}
	w, err = wire.NewValueMap(_Map_String_String_MapItemList(v.Reasons)), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 1, Value: w}
	i++

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _Map_String_String_Read(m wire.MapItemList) (map[string]string, error) {
	if m.KeyType() != wire.TBinary {
		return nil, nil
	}

	if m.ValueType() != wire.TBinary {
		return nil, nil
	}

	o := make(map[string]string, m.Size())
	err := m.ForEach(func(x wire.MapItem) error {
		k, err := x.Key.GetString(), error(nil)
		if err != nil {
			return err
		}

		v, err := x.Value.GetString(), error(nil)
		if err != nil {
			return err
		}

		o[k] = v
		return nil
	})
	m.Close()
	return o, err
}

// FromWire deserializes a BadSchemaError struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a BadSchemaError struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v BadSchemaError
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *BadSchemaError) FromWire(w wire.Value) error {
	var err error

	reasonsIsSet := false

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TMap {
				v.Reasons, err = _Map_String_String_Read(field.Value.GetMap())
				if err != nil {
					return err
				}
				reasonsIsSet = true
			}
		}
	}

	if !reasonsIsSet {
		return errors.New("field Reasons of BadSchemaError is required")
	}

	return nil
}

// String returns a readable string representation of a BadSchemaError
// struct.
func (v *BadSchemaError) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [1]string
	i := 0
	fields[i] = fmt.Sprintf("Reasons: %v", v.Reasons)
	i++

	return fmt.Sprintf("BadSchemaError{%v}", strings.Join(fields[:i], ", "))
}

func _Map_String_String_Equals(lhs, rhs map[string]string) bool {
	if len(lhs) != len(rhs) {
		return false
	}

	for lk, lv := range lhs {
		rv, ok := rhs[lk]
		if !ok {
			return false
		}
		if !(lv == rv) {
			return false
		}
	}
	return true
}

// Equals returns true if all the fields of this BadSchemaError match the
// provided BadSchemaError.
//
// This function performs a deep comparison.
func (v *BadSchemaError) Equals(rhs *BadSchemaError) bool {
	if !_Map_String_String_Equals(v.Reasons, rhs.Reasons) {
		return false
	}

	return true
}

func (v *BadSchemaError) Error() string {
	return v.String()
}

type CanUpsertSchemaRequest struct {
	Scope      *string             `json:"scope,omitempty"`
	NamePrefix *string             `json:"namePrefix,omitempty"`
	EntityDefs []*EntityDefinition `json:"entityDefs,omitempty"`
}

type _List_EntityDefinition_ValueList []*EntityDefinition

func (v _List_EntityDefinition_ValueList) ForEach(f func(wire.Value) error) error {
	for i, x := range v {
		if x == nil {
			return fmt.Errorf("invalid [%v]: value is nil", i)
		}
		w, err := x.ToWire()
		if err != nil {
			return err
		}
		err = f(w)
		if err != nil {
			return err
		}
	}
	return nil
}

func (v _List_EntityDefinition_ValueList) Size() int {
	return len(v)
}

func (_List_EntityDefinition_ValueList) ValueType() wire.Type {
	return wire.TStruct
}

func (_List_EntityDefinition_ValueList) Close() {}

// ToWire translates a CanUpsertSchemaRequest struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *CanUpsertSchemaRequest) ToWire() (wire.Value, error) {
	var (
		fields [3]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Scope != nil {
		w, err = wire.NewValueString(*(v.Scope)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	if v.NamePrefix != nil {
		w, err = wire.NewValueString(*(v.NamePrefix)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}
	if v.EntityDefs != nil {
		w, err = wire.NewValueList(_List_EntityDefinition_ValueList(v.EntityDefs)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 3, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _EntityDefinition_Read(w wire.Value) (*EntityDefinition, error) {
	var v EntityDefinition
	err := v.FromWire(w)
	return &v, err
}

func _List_EntityDefinition_Read(l wire.ValueList) ([]*EntityDefinition, error) {
	if l.ValueType() != wire.TStruct {
		return nil, nil
	}

	o := make([]*EntityDefinition, 0, l.Size())
	err := l.ForEach(func(x wire.Value) error {
		i, err := _EntityDefinition_Read(x)
		if err != nil {
			return err
		}
		o = append(o, i)
		return nil
	})
	l.Close()
	return o, err
}

// FromWire deserializes a CanUpsertSchemaRequest struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a CanUpsertSchemaRequest struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v CanUpsertSchemaRequest
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *CanUpsertSchemaRequest) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Scope = &x
				if err != nil {
					return err
				}

			}
		case 2:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.NamePrefix = &x
				if err != nil {
					return err
				}

			}
		case 3:
			if field.Value.Type() == wire.TList {
				v.EntityDefs, err = _List_EntityDefinition_Read(field.Value.GetList())
				if err != nil {
					return err
				}

			}
		}
	}

	return nil
}

// String returns a readable string representation of a CanUpsertSchemaRequest
// struct.
func (v *CanUpsertSchemaRequest) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [3]string
	i := 0
	if v.Scope != nil {
		fields[i] = fmt.Sprintf("Scope: %v", *(v.Scope))
		i++
	}
	if v.NamePrefix != nil {
		fields[i] = fmt.Sprintf("NamePrefix: %v", *(v.NamePrefix))
		i++
	}
	if v.EntityDefs != nil {
		fields[i] = fmt.Sprintf("EntityDefs: %v", v.EntityDefs)
		i++
	}

	return fmt.Sprintf("CanUpsertSchemaRequest{%v}", strings.Join(fields[:i], ", "))
}

func _List_EntityDefinition_Equals(lhs, rhs []*EntityDefinition) bool {
	if len(lhs) != len(rhs) {
		return false
	}

	for i, lv := range lhs {
		rv := rhs[i]
		if !lv.Equals(rv) {
			return false
		}
	}

	return true
}

// Equals returns true if all the fields of this CanUpsertSchemaRequest match the
// provided CanUpsertSchemaRequest.
//
// This function performs a deep comparison.
func (v *CanUpsertSchemaRequest) Equals(rhs *CanUpsertSchemaRequest) bool {
	if !_String_EqualsPtr(v.Scope, rhs.Scope) {
		return false
	}
	if !_String_EqualsPtr(v.NamePrefix, rhs.NamePrefix) {
		return false
	}
	if !((v.EntityDefs == nil && rhs.EntityDefs == nil) || (v.EntityDefs != nil && rhs.EntityDefs != nil && _List_EntityDefinition_Equals(v.EntityDefs, rhs.EntityDefs))) {
		return false
	}

	return true
}

// GetScope returns the value of Scope if it is set or its
// zero value if it is unset.
func (v *CanUpsertSchemaRequest) GetScope() (o string) {
	if v.Scope != nil {
		return *v.Scope
	}

	return
}

// GetNamePrefix returns the value of NamePrefix if it is set or its
// zero value if it is unset.
func (v *CanUpsertSchemaRequest) GetNamePrefix() (o string) {
	if v.NamePrefix != nil {
		return *v.NamePrefix
	}

	return
}

type CanUpsertSchemaResponse struct {
	Version *int32 `json:"version,omitempty"`
}

// ToWire translates a CanUpsertSchemaResponse struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *CanUpsertSchemaResponse) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Version != nil {
		w, err = wire.NewValueI32(*(v.Version)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a CanUpsertSchemaResponse struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a CanUpsertSchemaResponse struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v CanUpsertSchemaResponse
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *CanUpsertSchemaResponse) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TI32 {
				var x int32
				x, err = field.Value.GetI32(), error(nil)
				v.Version = &x
				if err != nil {
					return err
				}

			}
		}
	}

	return nil
}

// String returns a readable string representation of a CanUpsertSchemaResponse
// struct.
func (v *CanUpsertSchemaResponse) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [1]string
	i := 0
	if v.Version != nil {
		fields[i] = fmt.Sprintf("Version: %v", *(v.Version))
		i++
	}

	return fmt.Sprintf("CanUpsertSchemaResponse{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this CanUpsertSchemaResponse match the
// provided CanUpsertSchemaResponse.
//
// This function performs a deep comparison.
func (v *CanUpsertSchemaResponse) Equals(rhs *CanUpsertSchemaResponse) bool {
	if !_I32_EqualsPtr(v.Version, rhs.Version) {
		return false
	}

	return true
}

// GetVersion returns the value of Version if it is set or its
// zero value if it is unset.
func (v *CanUpsertSchemaResponse) GetVersion() (o int32) {
	if v.Version != nil {
		return *v.Version
	}

	return
}

type CheckSchemaRequest struct {
	Scope      *string             `json:"scope,omitempty"`
	NamePrefix *string             `json:"namePrefix,omitempty"`
	EntityDefs []*EntityDefinition `json:"entityDefs,omitempty"`
}

// ToWire translates a CheckSchemaRequest struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *CheckSchemaRequest) ToWire() (wire.Value, error) {
	var (
		fields [3]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Scope != nil {
		w, err = wire.NewValueString(*(v.Scope)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	if v.NamePrefix != nil {
		w, err = wire.NewValueString(*(v.NamePrefix)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}
	if v.EntityDefs != nil {
		w, err = wire.NewValueList(_List_EntityDefinition_ValueList(v.EntityDefs)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 3, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a CheckSchemaRequest struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a CheckSchemaRequest struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v CheckSchemaRequest
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *CheckSchemaRequest) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Scope = &x
				if err != nil {
					return err
				}

			}
		case 2:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.NamePrefix = &x
				if err != nil {
					return err
				}

			}
		case 3:
			if field.Value.Type() == wire.TList {
				v.EntityDefs, err = _List_EntityDefinition_Read(field.Value.GetList())
				if err != nil {
					return err
				}

			}
		}
	}

	return nil
}

// String returns a readable string representation of a CheckSchemaRequest
// struct.
func (v *CheckSchemaRequest) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [3]string
	i := 0
	if v.Scope != nil {
		fields[i] = fmt.Sprintf("Scope: %v", *(v.Scope))
		i++
	}
	if v.NamePrefix != nil {
		fields[i] = fmt.Sprintf("NamePrefix: %v", *(v.NamePrefix))
		i++
	}
	if v.EntityDefs != nil {
		fields[i] = fmt.Sprintf("EntityDefs: %v", v.EntityDefs)
		i++
	}

	return fmt.Sprintf("CheckSchemaRequest{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this CheckSchemaRequest match the
// provided CheckSchemaRequest.
//
// This function performs a deep comparison.
func (v *CheckSchemaRequest) Equals(rhs *CheckSchemaRequest) bool {
	if !_String_EqualsPtr(v.Scope, rhs.Scope) {
		return false
	}
	if !_String_EqualsPtr(v.NamePrefix, rhs.NamePrefix) {
		return false
	}
	if !((v.EntityDefs == nil && rhs.EntityDefs == nil) || (v.EntityDefs != nil && rhs.EntityDefs != nil && _List_EntityDefinition_Equals(v.EntityDefs, rhs.EntityDefs))) {
		return false
	}

	return true
}

// GetScope returns the value of Scope if it is set or its
// zero value if it is unset.
func (v *CheckSchemaRequest) GetScope() (o string) {
	if v.Scope != nil {
		return *v.Scope
	}

	return
}

// GetNamePrefix returns the value of NamePrefix if it is set or its
// zero value if it is unset.
func (v *CheckSchemaRequest) GetNamePrefix() (o string) {
	if v.NamePrefix != nil {
		return *v.NamePrefix
	}

	return
}

type CheckSchemaResponse struct {
	Version *int32 `json:"version,omitempty"`
}

// ToWire translates a CheckSchemaResponse struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *CheckSchemaResponse) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Version != nil {
		w, err = wire.NewValueI32(*(v.Version)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a CheckSchemaResponse struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a CheckSchemaResponse struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v CheckSchemaResponse
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *CheckSchemaResponse) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TI32 {
				var x int32
				x, err = field.Value.GetI32(), error(nil)
				v.Version = &x
				if err != nil {
					return err
				}

			}
		}
	}

	return nil
}

// String returns a readable string representation of a CheckSchemaResponse
// struct.
func (v *CheckSchemaResponse) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [1]string
	i := 0
	if v.Version != nil {
		fields[i] = fmt.Sprintf("Version: %v", *(v.Version))
		i++
	}

	return fmt.Sprintf("CheckSchemaResponse{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this CheckSchemaResponse match the
// provided CheckSchemaResponse.
//
// This function performs a deep comparison.
func (v *CheckSchemaResponse) Equals(rhs *CheckSchemaResponse) bool {
	if !_I32_EqualsPtr(v.Version, rhs.Version) {
		return false
	}

	return true
}

// GetVersion returns the value of Version if it is set or its
// zero value if it is unset.
func (v *CheckSchemaResponse) GetVersion() (o int32) {
	if v.Version != nil {
		return *v.Version
	}

	return
}

type CheckSchemaStatusRequest struct {
	Scope      *string `json:"scope,omitempty"`
	NamePrefix *string `json:"namePrefix,omitempty"`
	Version    *int32  `json:"version,omitempty"`
}

// ToWire translates a CheckSchemaStatusRequest struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *CheckSchemaStatusRequest) ToWire() (wire.Value, error) {
	var (
		fields [3]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Scope != nil {
		w, err = wire.NewValueString(*(v.Scope)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	if v.NamePrefix != nil {
		w, err = wire.NewValueString(*(v.NamePrefix)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}
	if v.Version != nil {
		w, err = wire.NewValueI32(*(v.Version)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 3, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a CheckSchemaStatusRequest struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a CheckSchemaStatusRequest struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v CheckSchemaStatusRequest
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *CheckSchemaStatusRequest) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Scope = &x
				if err != nil {
					return err
				}

			}
		case 2:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.NamePrefix = &x
				if err != nil {
					return err
				}

			}
		case 3:
			if field.Value.Type() == wire.TI32 {
				var x int32
				x, err = field.Value.GetI32(), error(nil)
				v.Version = &x
				if err != nil {
					return err
				}

			}
		}
	}

	return nil
}

// String returns a readable string representation of a CheckSchemaStatusRequest
// struct.
func (v *CheckSchemaStatusRequest) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [3]string
	i := 0
	if v.Scope != nil {
		fields[i] = fmt.Sprintf("Scope: %v", *(v.Scope))
		i++
	}
	if v.NamePrefix != nil {
		fields[i] = fmt.Sprintf("NamePrefix: %v", *(v.NamePrefix))
		i++
	}
	if v.Version != nil {
		fields[i] = fmt.Sprintf("Version: %v", *(v.Version))
		i++
	}

	return fmt.Sprintf("CheckSchemaStatusRequest{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this CheckSchemaStatusRequest match the
// provided CheckSchemaStatusRequest.
//
// This function performs a deep comparison.
func (v *CheckSchemaStatusRequest) Equals(rhs *CheckSchemaStatusRequest) bool {
	if !_String_EqualsPtr(v.Scope, rhs.Scope) {
		return false
	}
	if !_String_EqualsPtr(v.NamePrefix, rhs.NamePrefix) {
		return false
	}
	if !_I32_EqualsPtr(v.Version, rhs.Version) {
		return false
	}

	return true
}

// GetScope returns the value of Scope if it is set or its
// zero value if it is unset.
func (v *CheckSchemaStatusRequest) GetScope() (o string) {
	if v.Scope != nil {
		return *v.Scope
	}

	return
}

// GetNamePrefix returns the value of NamePrefix if it is set or its
// zero value if it is unset.
func (v *CheckSchemaStatusRequest) GetNamePrefix() (o string) {
	if v.NamePrefix != nil {
		return *v.NamePrefix
	}

	return
}

// GetVersion returns the value of Version if it is set or its
// zero value if it is unset.
func (v *CheckSchemaStatusRequest) GetVersion() (o int32) {
	if v.Version != nil {
		return *v.Version
	}

	return
}

type CheckSchemaStatusResponse struct {
	Version *int32  `json:"version,omitempty"`
	Status  *string `json:"status,omitempty"`
}

// ToWire translates a CheckSchemaStatusResponse struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *CheckSchemaStatusResponse) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Version != nil {
		w, err = wire.NewValueI32(*(v.Version)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	if v.Status != nil {
		w, err = wire.NewValueString(*(v.Status)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a CheckSchemaStatusResponse struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a CheckSchemaStatusResponse struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v CheckSchemaStatusResponse
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *CheckSchemaStatusResponse) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TI32 {
				var x int32
				x, err = field.Value.GetI32(), error(nil)
				v.Version = &x
				if err != nil {
					return err
				}

			}
		case 2:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Status = &x
				if err != nil {
					return err
				}

			}
		}
	}

	return nil
}

// String returns a readable string representation of a CheckSchemaStatusResponse
// struct.
func (v *CheckSchemaStatusResponse) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [2]string
	i := 0
	if v.Version != nil {
		fields[i] = fmt.Sprintf("Version: %v", *(v.Version))
		i++
	}
	if v.Status != nil {
		fields[i] = fmt.Sprintf("Status: %v", *(v.Status))
		i++
	}

	return fmt.Sprintf("CheckSchemaStatusResponse{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this CheckSchemaStatusResponse match the
// provided CheckSchemaStatusResponse.
//
// This function performs a deep comparison.
func (v *CheckSchemaStatusResponse) Equals(rhs *CheckSchemaStatusResponse) bool {
	if !_I32_EqualsPtr(v.Version, rhs.Version) {
		return false
	}
	if !_String_EqualsPtr(v.Status, rhs.Status) {
		return false
	}

	return true
}

// GetVersion returns the value of Version if it is set or its
// zero value if it is unset.
func (v *CheckSchemaStatusResponse) GetVersion() (o int32) {
	if v.Version != nil {
		return *v.Version
	}

	return
}

// GetStatus returns the value of Status if it is set or its
// zero value if it is unset.
func (v *CheckSchemaStatusResponse) GetStatus() (o string) {
	if v.Status != nil {
		return *v.Status
	}

	return
}

type ClusteringKey struct {
	Name *string `json:"name,omitempty"`
	Asc  *bool   `json:"asc,omitempty"`
}

// ToWire translates a ClusteringKey struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *ClusteringKey) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Name != nil {
		w, err = wire.NewValueString(*(v.Name)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	if v.Asc != nil {
		w, err = wire.NewValueBool(*(v.Asc)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a ClusteringKey struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a ClusteringKey struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v ClusteringKey
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *ClusteringKey) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Name = &x
				if err != nil {
					return err
				}

			}
		case 2:
			if field.Value.Type() == wire.TBool {
				var x bool
				x, err = field.Value.GetBool(), error(nil)
				v.Asc = &x
				if err != nil {
					return err
				}

			}
		}
	}

	return nil
}

// String returns a readable string representation of a ClusteringKey
// struct.
func (v *ClusteringKey) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [2]string
	i := 0
	if v.Name != nil {
		fields[i] = fmt.Sprintf("Name: %v", *(v.Name))
		i++
	}
	if v.Asc != nil {
		fields[i] = fmt.Sprintf("Asc: %v", *(v.Asc))
		i++
	}

	return fmt.Sprintf("ClusteringKey{%v}", strings.Join(fields[:i], ", "))
}

func _Bool_EqualsPtr(lhs, rhs *bool) bool {
	if lhs != nil && rhs != nil {

		x := *lhs
		y := *rhs
		return (x == y)
	}
	return lhs == nil && rhs == nil
}

// Equals returns true if all the fields of this ClusteringKey match the
// provided ClusteringKey.
//
// This function performs a deep comparison.
func (v *ClusteringKey) Equals(rhs *ClusteringKey) bool {
	if !_String_EqualsPtr(v.Name, rhs.Name) {
		return false
	}
	if !_Bool_EqualsPtr(v.Asc, rhs.Asc) {
		return false
	}

	return true
}

// GetName returns the value of Name if it is set or its
// zero value if it is unset.
func (v *ClusteringKey) GetName() (o string) {
	if v.Name != nil {
		return *v.Name
	}

	return
}

// GetAsc returns the value of Asc if it is set or its
// zero value if it is unset.
func (v *ClusteringKey) GetAsc() (o bool) {
	if v.Asc != nil {
		return *v.Asc
	}

	return
}

type Condition struct {
	Op    *Operator `json:"op,omitempty"`
	Field *Field    `json:"field,omitempty"`
}

// ToWire translates a Condition struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *Condition) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Op != nil {
		w, err = v.Op.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	if v.Field != nil {
		w, err = v.Field.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _Operator_Read(w wire.Value) (Operator, error) {
	var v Operator
	err := v.FromWire(w)
	return v, err
}

func _Field_Read(w wire.Value) (*Field, error) {
	var v Field
	err := v.FromWire(w)
	return &v, err
}

// FromWire deserializes a Condition struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a Condition struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v Condition
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *Condition) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TI32 {
				var x Operator
				x, err = _Operator_Read(field.Value)
				v.Op = &x
				if err != nil {
					return err
				}

			}
		case 2:
			if field.Value.Type() == wire.TStruct {
				v.Field, err = _Field_Read(field.Value)
				if err != nil {
					return err
				}

			}
		}
	}

	return nil
}

// String returns a readable string representation of a Condition
// struct.
func (v *Condition) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [2]string
	i := 0
	if v.Op != nil {
		fields[i] = fmt.Sprintf("Op: %v", *(v.Op))
		i++
	}
	if v.Field != nil {
		fields[i] = fmt.Sprintf("Field: %v", v.Field)
		i++
	}

	return fmt.Sprintf("Condition{%v}", strings.Join(fields[:i], ", "))
}

func _Operator_EqualsPtr(lhs, rhs *Operator) bool {
	if lhs != nil && rhs != nil {

		x := *lhs
		y := *rhs
		return x.Equals(y)
	}
	return lhs == nil && rhs == nil
}

// Equals returns true if all the fields of this Condition match the
// provided Condition.
//
// This function performs a deep comparison.
func (v *Condition) Equals(rhs *Condition) bool {
	if !_Operator_EqualsPtr(v.Op, rhs.Op) {
		return false
	}
	if !((v.Field == nil && rhs.Field == nil) || (v.Field != nil && rhs.Field != nil && v.Field.Equals(rhs.Field))) {
		return false
	}

	return true
}

// GetOp returns the value of Op if it is set or its
// zero value if it is unset.
func (v *Condition) GetOp() (o Operator) {
	if v.Op != nil {
		return *v.Op
	}

	return
}

type CreateRequest struct {
	Ref          *SchemaRef    `json:"ref,omitempty"`
	EntityValues FieldValueMap `json:"entityValues,omitempty"`
	TTL          *int64        `json:"ttl,omitempty"`
}

// ToWire translates a CreateRequest struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *CreateRequest) ToWire() (wire.Value, error) {
	var (
		fields [3]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Ref != nil {
		w, err = v.Ref.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	if v.EntityValues != nil {
		w, err = v.EntityValues.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}
	if v.TTL != nil {
		w, err = wire.NewValueI64(*(v.TTL)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 3, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _SchemaRef_Read(w wire.Value) (*SchemaRef, error) {
	var v SchemaRef
	err := v.FromWire(w)
	return &v, err
}

func _FieldValueMap_Read(w wire.Value) (FieldValueMap, error) {
	var x FieldValueMap
	err := x.FromWire(w)
	return x, err
}

// FromWire deserializes a CreateRequest struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a CreateRequest struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v CreateRequest
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *CreateRequest) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TStruct {
				v.Ref, err = _SchemaRef_Read(field.Value)
				if err != nil {
					return err
				}

			}
		case 2:
			if field.Value.Type() == wire.TMap {
				v.EntityValues, err = _FieldValueMap_Read(field.Value)
				if err != nil {
					return err
				}

			}
		case 3:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.TTL = &x
				if err != nil {
					return err
				}

			}
		}
	}

	return nil
}

// String returns a readable string representation of a CreateRequest
// struct.
func (v *CreateRequest) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [3]string
	i := 0
	if v.Ref != nil {
		fields[i] = fmt.Sprintf("Ref: %v", v.Ref)
		i++
	}
	if v.EntityValues != nil {
		fields[i] = fmt.Sprintf("EntityValues: %v", v.EntityValues)
		i++
	}
	if v.TTL != nil {
		fields[i] = fmt.Sprintf("TTL: %v", *(v.TTL))
		i++
	}

	return fmt.Sprintf("CreateRequest{%v}", strings.Join(fields[:i], ", "))
}

func _I64_EqualsPtr(lhs, rhs *int64) bool {
	if lhs != nil && rhs != nil {

		x := *lhs
		y := *rhs
		return (x == y)
	}
	return lhs == nil && rhs == nil
}

// Equals returns true if all the fields of this CreateRequest match the
// provided CreateRequest.
//
// This function performs a deep comparison.
func (v *CreateRequest) Equals(rhs *CreateRequest) bool {
	if !((v.Ref == nil && rhs.Ref == nil) || (v.Ref != nil && rhs.Ref != nil && v.Ref.Equals(rhs.Ref))) {
		return false
	}
	if !((v.EntityValues == nil && rhs.EntityValues == nil) || (v.EntityValues != nil && rhs.EntityValues != nil && v.EntityValues.Equals(rhs.EntityValues))) {
		return false
	}
	if !_I64_EqualsPtr(v.TTL, rhs.TTL) {
		return false
	}

	return true
}

// GetTTL returns the value of TTL if it is set or its
// zero value if it is unset.
func (v *CreateRequest) GetTTL() (o int64) {
	if v.TTL != nil {
		return *v.TTL
	}

	return
}

type CreateScopeRequest struct {
	Name *string `json:"name,omitempty"`
}

// ToWire translates a CreateScopeRequest struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *CreateScopeRequest) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Name != nil {
		w, err = wire.NewValueString(*(v.Name)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a CreateScopeRequest struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a CreateScopeRequest struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v CreateScopeRequest
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *CreateScopeRequest) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Name = &x
				if err != nil {
					return err
				}

			}
		}
	}

	return nil
}

// String returns a readable string representation of a CreateScopeRequest
// struct.
func (v *CreateScopeRequest) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [1]string
	i := 0
	if v.Name != nil {
		fields[i] = fmt.Sprintf("Name: %v", *(v.Name))
		i++
	}

	return fmt.Sprintf("CreateScopeRequest{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this CreateScopeRequest match the
// provided CreateScopeRequest.
//
// This function performs a deep comparison.
func (v *CreateScopeRequest) Equals(rhs *CreateScopeRequest) bool {
	if !_String_EqualsPtr(v.Name, rhs.Name) {
		return false
	}

	return true
}

// GetName returns the value of Name if it is set or its
// zero value if it is unset.
func (v *CreateScopeRequest) GetName() (o string) {
	if v.Name != nil {
		return *v.Name
	}

	return
}

type DropScopeRequest struct {
	Name *string `json:"name,omitempty"`
}

// ToWire translates a DropScopeRequest struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *DropScopeRequest) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Name != nil {
		w, err = wire.NewValueString(*(v.Name)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a DropScopeRequest struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a DropScopeRequest struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v DropScopeRequest
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *DropScopeRequest) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Name = &x
				if err != nil {
					return err
				}

			}
		}
	}

	return nil
}

// String returns a readable string representation of a DropScopeRequest
// struct.
func (v *DropScopeRequest) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [1]string
	i := 0
	if v.Name != nil {
		fields[i] = fmt.Sprintf("Name: %v", *(v.Name))
		i++
	}

	return fmt.Sprintf("DropScopeRequest{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this DropScopeRequest match the
// provided DropScopeRequest.
//
// This function performs a deep comparison.
func (v *DropScopeRequest) Equals(rhs *DropScopeRequest) bool {
	if !_String_EqualsPtr(v.Name, rhs.Name) {
		return false
	}

	return true
}

// GetName returns the value of Name if it is set or its
// zero value if it is unset.
func (v *DropScopeRequest) GetName() (o string) {
	if v.Name != nil {
		return *v.Name
	}

	return
}

type ETLState int32

const (
	ETLStateOff       ETLState = 1
	ETLStateOn        ETLState = 2
	ETLStateReserved0 ETLState = 3
	ETLStateReserved1 ETLState = 4
)

// ETLState_Values returns all recognized values of ETLState.
func ETLState_Values() []ETLState {
	return []ETLState{
		ETLStateOff,
		ETLStateOn,
		ETLStateReserved0,
		ETLStateReserved1,
	}
}

// UnmarshalText tries to decode ETLState from a byte slice
// containing its name.
//
//   var v ETLState
//   err := v.UnmarshalText([]byte("OFF"))
func (v *ETLState) UnmarshalText(value []byte) error {
	switch string(value) {
	case "OFF":
		*v = ETLStateOff
		return nil
	case "ON":
		*v = ETLStateOn
		return nil
	case "RESERVED0":
		*v = ETLStateReserved0
		return nil
	case "RESERVED1":
		*v = ETLStateReserved1
		return nil
	default:
		return fmt.Errorf("unknown enum value %q for %q", value, "ETLState")
	}
}

// Ptr returns a pointer to this enum value.
func (v ETLState) Ptr() *ETLState {
	return &v
}

// ToWire translates ETLState into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// Enums are represented as 32-bit integers over the wire.
func (v ETLState) ToWire() (wire.Value, error) {
	return wire.NewValueI32(int32(v)), nil
}

// FromWire deserializes ETLState from its Thrift-level
// representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TI32)
//   if err != nil {
//     return ETLState(0), err
//   }
//
//   var v ETLState
//   if err := v.FromWire(x); err != nil {
//     return ETLState(0), err
//   }
//   return v, nil
func (v *ETLState) FromWire(w wire.Value) error {
	*v = (ETLState)(w.GetI32())
	return nil
}

// String returns a readable string representation of ETLState.
func (v ETLState) String() string {
	w := int32(v)
	switch w {
	case 1:
		return "OFF"
	case 2:
		return "ON"
	case 3:
		return "RESERVED0"
	case 4:
		return "RESERVED1"
	}
	return fmt.Sprintf("ETLState(%d)", w)
}

// Equals returns true if this ETLState value matches the provided
// value.
func (v ETLState) Equals(rhs ETLState) bool {
	return v == rhs
}

// MarshalJSON serializes ETLState into JSON.
//
// If the enum value is recognized, its name is returned. Otherwise,
// its integer value is returned.
//
// This implements json.Marshaler.
func (v ETLState) MarshalJSON() ([]byte, error) {
	switch int32(v) {
	case 1:
		return ([]byte)("\"OFF\""), nil
	case 2:
		return ([]byte)("\"ON\""), nil
	case 3:
		return ([]byte)("\"RESERVED0\""), nil
	case 4:
		return ([]byte)("\"RESERVED1\""), nil
	}
	return ([]byte)(strconv.FormatInt(int64(v), 10)), nil
}

// UnmarshalJSON attempts to decode ETLState from its JSON
// representation.
//
// This implementation supports both, numeric and string inputs. If a
// string is provided, it must be a known enum name.
//
// This implements json.Unmarshaler.
func (v *ETLState) UnmarshalJSON(text []byte) error {
	d := json.NewDecoder(bytes.NewReader(text))
	d.UseNumber()
	t, err := d.Token()
	if err != nil {
		return err
	}

	switch w := t.(type) {
	case json.Number:
		x, err := w.Int64()
		if err != nil {
			return err
		}
		if x > math.MaxInt32 {
			return fmt.Errorf("enum overflow from JSON %q for %q", text, "ETLState")
		}
		if x < math.MinInt32 {
			return fmt.Errorf("enum underflow from JSON %q for %q", text, "ETLState")
		}
		*v = (ETLState)(x)
		return nil
	case string:
		return v.UnmarshalText([]byte(w))
	default:
		return fmt.Errorf("invalid JSON value %q (%T) to unmarshal into %q", t, t, "ETLState")
	}
}

type ElemType int32

const (
	ElemTypeBool      ElemType = 0
	ElemTypeBlob      ElemType = 1
	ElemTypeString    ElemType = 2
	ElemTypeInt32     ElemType = 3
	ElemTypeInt64     ElemType = 4
	ElemTypeDouble    ElemType = 5
	ElemTypeTimestamp ElemType = 6
	ElemTypeUUID      ElemType = 7
	ElemTypeReserved0 ElemType = 8
	ElemTypeReserved1 ElemType = 9
	ElemTypeReserved2 ElemType = 10
	ElemTypeReserved3 ElemType = 11
)

// ElemType_Values returns all recognized values of ElemType.
func ElemType_Values() []ElemType {
	return []ElemType{
		ElemTypeBool,
		ElemTypeBlob,
		ElemTypeString,
		ElemTypeInt32,
		ElemTypeInt64,
		ElemTypeDouble,
		ElemTypeTimestamp,
		ElemTypeUUID,
		ElemTypeReserved0,
		ElemTypeReserved1,
		ElemTypeReserved2,
		ElemTypeReserved3,
	}
}

// UnmarshalText tries to decode ElemType from a byte slice
// containing its name.
//
//   var v ElemType
//   err := v.UnmarshalText([]byte("BOOL"))
func (v *ElemType) UnmarshalText(value []byte) error {
	switch string(value) {
	case "BOOL":
		*v = ElemTypeBool
		return nil
	case "BLOB":
		*v = ElemTypeBlob
		return nil
	case "STRING":
		*v = ElemTypeString
		return nil
	case "INT32":
		*v = ElemTypeInt32
		return nil
	case "INT64":
		*v = ElemTypeInt64
		return nil
	case "DOUBLE":
		*v = ElemTypeDouble
		return nil
	case "TIMESTAMP":
		*v = ElemTypeTimestamp
		return nil
	case "UUID":
		*v = ElemTypeUUID
		return nil
	case "RESERVED0":
		*v = ElemTypeReserved0
		return nil
	case "RESERVED1":
		*v = ElemTypeReserved1
		return nil
	case "RESERVED2":
		*v = ElemTypeReserved2
		return nil
	case "RESERVED3":
		*v = ElemTypeReserved3
		return nil
	default:
		return fmt.Errorf("unknown enum value %q for %q", value, "ElemType")
	}
}

// Ptr returns a pointer to this enum value.
func (v ElemType) Ptr() *ElemType {
	return &v
}

// ToWire translates ElemType into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// Enums are represented as 32-bit integers over the wire.
func (v ElemType) ToWire() (wire.Value, error) {
	return wire.NewValueI32(int32(v)), nil
}

// FromWire deserializes ElemType from its Thrift-level
// representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TI32)
//   if err != nil {
//     return ElemType(0), err
//   }
//
//   var v ElemType
//   if err := v.FromWire(x); err != nil {
//     return ElemType(0), err
//   }
//   return v, nil
func (v *ElemType) FromWire(w wire.Value) error {
	*v = (ElemType)(w.GetI32())
	return nil
}

// String returns a readable string representation of ElemType.
func (v ElemType) String() string {
	w := int32(v)
	switch w {
	case 0:
		return "BOOL"
	case 1:
		return "BLOB"
	case 2:
		return "STRING"
	case 3:
		return "INT32"
	case 4:
		return "INT64"
	case 5:
		return "DOUBLE"
	case 6:
		return "TIMESTAMP"
	case 7:
		return "UUID"
	case 8:
		return "RESERVED0"
	case 9:
		return "RESERVED1"
	case 10:
		return "RESERVED2"
	case 11:
		return "RESERVED3"
	}
	return fmt.Sprintf("ElemType(%d)", w)
}

// Equals returns true if this ElemType value matches the provided
// value.
func (v ElemType) Equals(rhs ElemType) bool {
	return v == rhs
}

// MarshalJSON serializes ElemType into JSON.
//
// If the enum value is recognized, its name is returned. Otherwise,
// its integer value is returned.
//
// This implements json.Marshaler.
func (v ElemType) MarshalJSON() ([]byte, error) {
	switch int32(v) {
	case 0:
		return ([]byte)("\"BOOL\""), nil
	case 1:
		return ([]byte)("\"BLOB\""), nil
	case 2:
		return ([]byte)("\"STRING\""), nil
	case 3:
		return ([]byte)("\"INT32\""), nil
	case 4:
		return ([]byte)("\"INT64\""), nil
	case 5:
		return ([]byte)("\"DOUBLE\""), nil
	case 6:
		return ([]byte)("\"TIMESTAMP\""), nil
	case 7:
		return ([]byte)("\"UUID\""), nil
	case 8:
		return ([]byte)("\"RESERVED0\""), nil
	case 9:
		return ([]byte)("\"RESERVED1\""), nil
	case 10:
		return ([]byte)("\"RESERVED2\""), nil
	case 11:
		return ([]byte)("\"RESERVED3\""), nil
	}
	return ([]byte)(strconv.FormatInt(int64(v), 10)), nil
}

// UnmarshalJSON attempts to decode ElemType from its JSON
// representation.
//
// This implementation supports both, numeric and string inputs. If a
// string is provided, it must be a known enum name.
//
// This implements json.Unmarshaler.
func (v *ElemType) UnmarshalJSON(text []byte) error {
	d := json.NewDecoder(bytes.NewReader(text))
	d.UseNumber()
	t, err := d.Token()
	if err != nil {
		return err
	}

	switch w := t.(type) {
	case json.Number:
		x, err := w.Int64()
		if err != nil {
			return err
		}
		if x > math.MaxInt32 {
			return fmt.Errorf("enum overflow from JSON %q for %q", text, "ElemType")
		}
		if x < math.MinInt32 {
			return fmt.Errorf("enum underflow from JSON %q for %q", text, "ElemType")
		}
		*v = (ElemType)(x)
		return nil
	case string:
		return v.UnmarshalText([]byte(w))
	default:
		return fmt.Errorf("invalid JSON value %q (%T) to unmarshal into %q", t, t, "ElemType")
	}
}

type EntityDefinition struct {
	Name       *string                     `json:"name,omitempty"`
	FieldDescs map[string]*FieldDesc       `json:"fieldDescs,omitempty"`
	PrimaryKey *PrimaryKey                 `json:"primaryKey,omitempty"`
	Indexes    map[string]*IndexDefinition `json:"Indexes,omitempty"`
	Etl        *ETLState                   `json:"etl,omitempty"`
}

type _Map_String_FieldDesc_MapItemList map[string]*FieldDesc

func (m _Map_String_FieldDesc_MapItemList) ForEach(f func(wire.MapItem) error) error {
	for k, v := range m {
		if v == nil {
			return fmt.Errorf("invalid [%v]: value is nil", k)
		}
		kw, err := wire.NewValueString(k), error(nil)
		if err != nil {
			return err
		}

		vw, err := v.ToWire()
		if err != nil {
			return err
		}
		err = f(wire.MapItem{Key: kw, Value: vw})
		if err != nil {
			return err
		}
	}
	return nil
}

func (m _Map_String_FieldDesc_MapItemList) Size() int {
	return len(m)
}

func (_Map_String_FieldDesc_MapItemList) KeyType() wire.Type {
	return wire.TBinary
}

func (_Map_String_FieldDesc_MapItemList) ValueType() wire.Type {
	return wire.TStruct
}

func (_Map_String_FieldDesc_MapItemList) Close() {}

type _Map_String_IndexDefinition_MapItemList map[string]*IndexDefinition

func (m _Map_String_IndexDefinition_MapItemList) ForEach(f func(wire.MapItem) error) error {
	for k, v := range m {
		if v == nil {
			return fmt.Errorf("invalid [%v]: value is nil", k)
		}
		kw, err := wire.NewValueString(k), error(nil)
		if err != nil {
			return err
		}

		vw, err := v.ToWire()
		if err != nil {
			return err
		}
		err = f(wire.MapItem{Key: kw, Value: vw})
		if err != nil {
			return err
		}
	}
	return nil
}

func (m _Map_String_IndexDefinition_MapItemList) Size() int {
	return len(m)
}

func (_Map_String_IndexDefinition_MapItemList) KeyType() wire.Type {
	return wire.TBinary
}

func (_Map_String_IndexDefinition_MapItemList) ValueType() wire.Type {
	return wire.TStruct
}

func (_Map_String_IndexDefinition_MapItemList) Close() {}

// ToWire translates a EntityDefinition struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *EntityDefinition) ToWire() (wire.Value, error) {
	var (
		fields [5]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Name != nil {
		w, err = wire.NewValueString(*(v.Name)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	if v.FieldDescs != nil {
		w, err = wire.NewValueMap(_Map_String_FieldDesc_MapItemList(v.FieldDescs)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}
	if v.PrimaryKey != nil {
		w, err = v.PrimaryKey.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 3, Value: w}
		i++
	}
	if v.Indexes != nil {
		w, err = wire.NewValueMap(_Map_String_IndexDefinition_MapItemList(v.Indexes)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 4, Value: w}
		i++
	}
	if v.Etl != nil {
		w, err = v.Etl.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 5, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _FieldDesc_Read(w wire.Value) (*FieldDesc, error) {
	var v FieldDesc
	err := v.FromWire(w)
	return &v, err
}

func _Map_String_FieldDesc_Read(m wire.MapItemList) (map[string]*FieldDesc, error) {
	if m.KeyType() != wire.TBinary {
		return nil, nil
	}

	if m.ValueType() != wire.TStruct {
		return nil, nil
	}

	o := make(map[string]*FieldDesc, m.Size())
	err := m.ForEach(func(x wire.MapItem) error {
		k, err := x.Key.GetString(), error(nil)
		if err != nil {
			return err
		}

		v, err := _FieldDesc_Read(x.Value)
		if err != nil {
			return err
		}

		o[k] = v
		return nil
	})
	m.Close()
	return o, err
}

func _PrimaryKey_Read(w wire.Value) (*PrimaryKey, error) {
	var v PrimaryKey
	err := v.FromWire(w)
	return &v, err
}

func _IndexDefinition_Read(w wire.Value) (*IndexDefinition, error) {
	var v IndexDefinition
	err := v.FromWire(w)
	return &v, err
}

func _Map_String_IndexDefinition_Read(m wire.MapItemList) (map[string]*IndexDefinition, error) {
	if m.KeyType() != wire.TBinary {
		return nil, nil
	}

	if m.ValueType() != wire.TStruct {
		return nil, nil
	}

	o := make(map[string]*IndexDefinition, m.Size())
	err := m.ForEach(func(x wire.MapItem) error {
		k, err := x.Key.GetString(), error(nil)
		if err != nil {
			return err
		}

		v, err := _IndexDefinition_Read(x.Value)
		if err != nil {
			return err
		}

		o[k] = v
		return nil
	})
	m.Close()
	return o, err
}

func _ETLState_Read(w wire.Value) (ETLState, error) {
	var v ETLState
	err := v.FromWire(w)
	return v, err
}

// FromWire deserializes a EntityDefinition struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a EntityDefinition struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v EntityDefinition
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *EntityDefinition) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Name = &x
				if err != nil {
					return err
				}

			}
		case 2:
			if field.Value.Type() == wire.TMap {
				v.FieldDescs, err = _Map_String_FieldDesc_Read(field.Value.GetMap())
				if err != nil {
					return err
				}

			}
		case 3:
			if field.Value.Type() == wire.TStruct {
				v.PrimaryKey, err = _PrimaryKey_Read(field.Value)
				if err != nil {
					return err
				}

			}
		case 4:
			if field.Value.Type() == wire.TMap {
				v.Indexes, err = _Map_String_IndexDefinition_Read(field.Value.GetMap())
				if err != nil {
					return err
				}

			}
		case 5:
			if field.Value.Type() == wire.TI32 {
				var x ETLState
				x, err = _ETLState_Read(field.Value)
				v.Etl = &x
				if err != nil {
					return err
				}

			}
		}
	}

	return nil
}

// String returns a readable string representation of a EntityDefinition
// struct.
func (v *EntityDefinition) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [5]string
	i := 0
	if v.Name != nil {
		fields[i] = fmt.Sprintf("Name: %v", *(v.Name))
		i++
	}
	if v.FieldDescs != nil {
		fields[i] = fmt.Sprintf("FieldDescs: %v", v.FieldDescs)
		i++
	}
	if v.PrimaryKey != nil {
		fields[i] = fmt.Sprintf("PrimaryKey: %v", v.PrimaryKey)
		i++
	}
	if v.Indexes != nil {
		fields[i] = fmt.Sprintf("Indexes: %v", v.Indexes)
		i++
	}
	if v.Etl != nil {
		fields[i] = fmt.Sprintf("Etl: %v", *(v.Etl))
		i++
	}

	return fmt.Sprintf("EntityDefinition{%v}", strings.Join(fields[:i], ", "))
}

func _Map_String_FieldDesc_Equals(lhs, rhs map[string]*FieldDesc) bool {
	if len(lhs) != len(rhs) {
		return false
	}

	for lk, lv := range lhs {
		rv, ok := rhs[lk]
		if !ok {
			return false
		}
		if !lv.Equals(rv) {
			return false
		}
	}
	return true
}

func _Map_String_IndexDefinition_Equals(lhs, rhs map[string]*IndexDefinition) bool {
	if len(lhs) != len(rhs) {
		return false
	}

	for lk, lv := range lhs {
		rv, ok := rhs[lk]
		if !ok {
			return false
		}
		if !lv.Equals(rv) {
			return false
		}
	}
	return true
}

func _ETLState_EqualsPtr(lhs, rhs *ETLState) bool {
	if lhs != nil && rhs != nil {

		x := *lhs
		y := *rhs
		return x.Equals(y)
	}
	return lhs == nil && rhs == nil
}

// Equals returns true if all the fields of this EntityDefinition match the
// provided EntityDefinition.
//
// This function performs a deep comparison.
func (v *EntityDefinition) Equals(rhs *EntityDefinition) bool {
	if !_String_EqualsPtr(v.Name, rhs.Name) {
		return false
	}
	if !((v.FieldDescs == nil && rhs.FieldDescs == nil) || (v.FieldDescs != nil && rhs.FieldDescs != nil && _Map_String_FieldDesc_Equals(v.FieldDescs, rhs.FieldDescs))) {
		return false
	}
	if !((v.PrimaryKey == nil && rhs.PrimaryKey == nil) || (v.PrimaryKey != nil && rhs.PrimaryKey != nil && v.PrimaryKey.Equals(rhs.PrimaryKey))) {
		return false
	}
	if !((v.Indexes == nil && rhs.Indexes == nil) || (v.Indexes != nil && rhs.Indexes != nil && _Map_String_IndexDefinition_Equals(v.Indexes, rhs.Indexes))) {
		return false
	}
	if !_ETLState_EqualsPtr(v.Etl, rhs.Etl) {
		return false
	}

	return true
}

// GetName returns the value of Name if it is set or its
// zero value if it is unset.
func (v *EntityDefinition) GetName() (o string) {
	if v.Name != nil {
		return *v.Name
	}

	return
}

// GetEtl returns the value of Etl if it is set or its
// zero value if it is unset.
func (v *EntityDefinition) GetEtl() (o ETLState) {
	if v.Etl != nil {
		return *v.Etl
	}

	return
}

type EntityOrError struct {
	EntityValues FieldValueMap `json:"entityValues,omitempty"`
	Error        *Error        `json:"error,omitempty"`
}

// ToWire translates a EntityOrError struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *EntityOrError) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.EntityValues != nil {
		w, err = v.EntityValues.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	if v.Error != nil {
		w, err = v.Error.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}

	if i != 1 {
		return wire.Value{}, fmt.Errorf("EntityOrError should have exactly one field: got %v fields", i)
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _Error_Read(w wire.Value) (*Error, error) {
	var v Error
	err := v.FromWire(w)
	return &v, err
}

// FromWire deserializes a EntityOrError struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a EntityOrError struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v EntityOrError
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *EntityOrError) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TMap {
				v.EntityValues, err = _FieldValueMap_Read(field.Value)
				if err != nil {
					return err
				}

			}
		case 2:
			if field.Value.Type() == wire.TStruct {
				v.Error, err = _Error_Read(field.Value)
				if err != nil {
					return err
				}

			}
		}
	}

	count := 0
	if v.EntityValues != nil {
		count++
	}
	if v.Error != nil {
		count++
	}
	if count != 1 {
		return fmt.Errorf("EntityOrError should have exactly one field: got %v fields", count)
	}

	return nil
}

// String returns a readable string representation of a EntityOrError
// struct.
func (v *EntityOrError) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [2]string
	i := 0
	if v.EntityValues != nil {
		fields[i] = fmt.Sprintf("EntityValues: %v", v.EntityValues)
		i++
	}
	if v.Error != nil {
		fields[i] = fmt.Sprintf("Error: %v", v.Error)
		i++
	}

	return fmt.Sprintf("EntityOrError{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this EntityOrError match the
// provided EntityOrError.
//
// This function performs a deep comparison.
func (v *EntityOrError) Equals(rhs *EntityOrError) bool {
	if !((v.EntityValues == nil && rhs.EntityValues == nil) || (v.EntityValues != nil && rhs.EntityValues != nil && v.EntityValues.Equals(rhs.EntityValues))) {
		return false
	}
	if !((v.Error == nil && rhs.Error == nil) || (v.Error != nil && rhs.Error != nil && v.Error.Equals(rhs.Error))) {
		return false
	}

	return true
}

type Error struct {
	ErrCode     *int32  `json:"errCode,omitempty"`
	Msg         *string `json:"msg,omitempty"`
	ShouldRetry *bool   `json:"shouldRetry,omitempty"`
}

// ToWire translates a Error struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *Error) ToWire() (wire.Value, error) {
	var (
		fields [3]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.ErrCode != nil {
		w, err = wire.NewValueI32(*(v.ErrCode)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	if v.Msg != nil {
		w, err = wire.NewValueString(*(v.Msg)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}
	if v.ShouldRetry != nil {
		w, err = wire.NewValueBool(*(v.ShouldRetry)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 3, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a Error struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a Error struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v Error
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *Error) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TI32 {
				var x int32
				x, err = field.Value.GetI32(), error(nil)
				v.ErrCode = &x
				if err != nil {
					return err
				}

			}
		case 2:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Msg = &x
				if err != nil {
					return err
				}

			}
		case 3:
			if field.Value.Type() == wire.TBool {
				var x bool
				x, err = field.Value.GetBool(), error(nil)
				v.ShouldRetry = &x
				if err != nil {
					return err
				}

			}
		}
	}

	return nil
}

// String returns a readable string representation of a Error
// struct.
func (v *Error) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [3]string
	i := 0
	if v.ErrCode != nil {
		fields[i] = fmt.Sprintf("ErrCode: %v", *(v.ErrCode))
		i++
	}
	if v.Msg != nil {
		fields[i] = fmt.Sprintf("Msg: %v", *(v.Msg))
		i++
	}
	if v.ShouldRetry != nil {
		fields[i] = fmt.Sprintf("ShouldRetry: %v", *(v.ShouldRetry))
		i++
	}

	return fmt.Sprintf("Error{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this Error match the
// provided Error.
//
// This function performs a deep comparison.
func (v *Error) Equals(rhs *Error) bool {
	if !_I32_EqualsPtr(v.ErrCode, rhs.ErrCode) {
		return false
	}
	if !_String_EqualsPtr(v.Msg, rhs.Msg) {
		return false
	}
	if !_Bool_EqualsPtr(v.ShouldRetry, rhs.ShouldRetry) {
		return false
	}

	return true
}

// GetErrCode returns the value of ErrCode if it is set or its
// zero value if it is unset.
func (v *Error) GetErrCode() (o int32) {
	if v.ErrCode != nil {
		return *v.ErrCode
	}

	return
}

// GetMsg returns the value of Msg if it is set or its
// zero value if it is unset.
func (v *Error) GetMsg() (o string) {
	if v.Msg != nil {
		return *v.Msg
	}

	return
}

// GetShouldRetry returns the value of ShouldRetry if it is set or its
// zero value if it is unset.
func (v *Error) GetShouldRetry() (o bool) {
	if v.ShouldRetry != nil {
		return *v.ShouldRetry
	}

	return
}

type Field struct {
	Name  *string `json:"name,omitempty"`
	Value *Value  `json:"value,omitempty"`
}

// ToWire translates a Field struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *Field) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Name != nil {
		w, err = wire.NewValueString(*(v.Name)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	if v.Value != nil {
		w, err = v.Value.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _Value_Read(w wire.Value) (*Value, error) {
	var v Value
	err := v.FromWire(w)
	return &v, err
}

// FromWire deserializes a Field struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a Field struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v Field
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *Field) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Name = &x
				if err != nil {
					return err
				}

			}
		case 2:
			if field.Value.Type() == wire.TStruct {
				v.Value, err = _Value_Read(field.Value)
				if err != nil {
					return err
				}

			}
		}
	}

	return nil
}

// String returns a readable string representation of a Field
// struct.
func (v *Field) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [2]string
	i := 0
	if v.Name != nil {
		fields[i] = fmt.Sprintf("Name: %v", *(v.Name))
		i++
	}
	if v.Value != nil {
		fields[i] = fmt.Sprintf("Value: %v", v.Value)
		i++
	}

	return fmt.Sprintf("Field{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this Field match the
// provided Field.
//
// This function performs a deep comparison.
func (v *Field) Equals(rhs *Field) bool {
	if !_String_EqualsPtr(v.Name, rhs.Name) {
		return false
	}
	if !((v.Value == nil && rhs.Value == nil) || (v.Value != nil && rhs.Value != nil && v.Value.Equals(rhs.Value))) {
		return false
	}

	return true
}

// GetName returns the value of Name if it is set or its
// zero value if it is unset.
func (v *Field) GetName() (o string) {
	if v.Name != nil {
		return *v.Name
	}

	return
}

type FieldDesc struct {
	Type *ElemType   `json:"type,omitempty"`
	Tags []*FieldTag `json:"tags,omitempty"`
}

type _Set_FieldTag_ValueList []*FieldTag

func (v _Set_FieldTag_ValueList) ForEach(f func(wire.Value) error) error {
	for _, x := range v {
		if x == nil {
			return fmt.Errorf("invalid set item: value is nil")
		}
		w, err := x.ToWire()
		if err != nil {
			return err
		}

		if err := f(w); err != nil {
			return err
		}
	}
	return nil
}

func (v _Set_FieldTag_ValueList) Size() int {
	return len(v)
}

func (_Set_FieldTag_ValueList) ValueType() wire.Type {
	return wire.TStruct
}

func (_Set_FieldTag_ValueList) Close() {}

// ToWire translates a FieldDesc struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *FieldDesc) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Type != nil {
		w, err = v.Type.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	if v.Tags != nil {
		w, err = wire.NewValueSet(_Set_FieldTag_ValueList(v.Tags)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _ElemType_Read(w wire.Value) (ElemType, error) {
	var v ElemType
	err := v.FromWire(w)
	return v, err
}

func _FieldTag_Read(w wire.Value) (*FieldTag, error) {
	var v FieldTag
	err := v.FromWire(w)
	return &v, err
}

func _Set_FieldTag_Read(s wire.ValueList) ([]*FieldTag, error) {
	if s.ValueType() != wire.TStruct {
		return nil, nil
	}

	o := make([]*FieldTag, 0, s.Size())
	err := s.ForEach(func(x wire.Value) error {
		i, err := _FieldTag_Read(x)
		if err != nil {
			return err
		}

		o = append(o, i)
		return nil
	})
	s.Close()
	return o, err
}

// FromWire deserializes a FieldDesc struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a FieldDesc struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v FieldDesc
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *FieldDesc) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TI32 {
				var x ElemType
				x, err = _ElemType_Read(field.Value)
				v.Type = &x
				if err != nil {
					return err
				}

			}
		case 2:
			if field.Value.Type() == wire.TSet {
				v.Tags, err = _Set_FieldTag_Read(field.Value.GetSet())
				if err != nil {
					return err
				}

			}
		}
	}

	return nil
}

// String returns a readable string representation of a FieldDesc
// struct.
func (v *FieldDesc) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [2]string
	i := 0
	if v.Type != nil {
		fields[i] = fmt.Sprintf("Type: %v", *(v.Type))
		i++
	}
	if v.Tags != nil {
		fields[i] = fmt.Sprintf("Tags: %v", v.Tags)
		i++
	}

	return fmt.Sprintf("FieldDesc{%v}", strings.Join(fields[:i], ", "))
}

func _ElemType_EqualsPtr(lhs, rhs *ElemType) bool {
	if lhs != nil && rhs != nil {

		x := *lhs
		y := *rhs
		return x.Equals(y)
	}
	return lhs == nil && rhs == nil
}

func _Set_FieldTag_Equals(lhs, rhs []*FieldTag) bool {
	if len(lhs) != len(rhs) {
		return false
	}

	for _, x := range lhs {
		ok := false
		for _, y := range rhs {
			if x.Equals(y) {
				ok = true
				break
			}
		}
		if !ok {
			return false
		}
	}

	return true
}

// Equals returns true if all the fields of this FieldDesc match the
// provided FieldDesc.
//
// This function performs a deep comparison.
func (v *FieldDesc) Equals(rhs *FieldDesc) bool {
	if !_ElemType_EqualsPtr(v.Type, rhs.Type) {
		return false
	}
	if !((v.Tags == nil && rhs.Tags == nil) || (v.Tags != nil && rhs.Tags != nil && _Set_FieldTag_Equals(v.Tags, rhs.Tags))) {
		return false
	}

	return true
}

// GetType returns the value of Type if it is set or its
// zero value if it is unset.
func (v *FieldDesc) GetType() (o ElemType) {
	if v.Type != nil {
		return *v.Type
	}

	return
}

type FieldTag struct {
	Name  *string `json:"name,omitempty"`
	Value *string `json:"value,omitempty"`
}

// ToWire translates a FieldTag struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *FieldTag) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Name != nil {
		w, err = wire.NewValueString(*(v.Name)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	if v.Value != nil {
		w, err = wire.NewValueString(*(v.Value)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a FieldTag struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a FieldTag struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v FieldTag
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *FieldTag) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Name = &x
				if err != nil {
					return err
				}

			}
		case 2:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Value = &x
				if err != nil {
					return err
				}

			}
		}
	}

	return nil
}

// String returns a readable string representation of a FieldTag
// struct.
func (v *FieldTag) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [2]string
	i := 0
	if v.Name != nil {
		fields[i] = fmt.Sprintf("Name: %v", *(v.Name))
		i++
	}
	if v.Value != nil {
		fields[i] = fmt.Sprintf("Value: %v", *(v.Value))
		i++
	}

	return fmt.Sprintf("FieldTag{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this FieldTag match the
// provided FieldTag.
//
// This function performs a deep comparison.
func (v *FieldTag) Equals(rhs *FieldTag) bool {
	if !_String_EqualsPtr(v.Name, rhs.Name) {
		return false
	}
	if !_String_EqualsPtr(v.Value, rhs.Value) {
		return false
	}

	return true
}

// GetName returns the value of Name if it is set or its
// zero value if it is unset.
func (v *FieldTag) GetName() (o string) {
	if v.Name != nil {
		return *v.Name
	}

	return
}

// GetValue returns the value of Value if it is set or its
// zero value if it is unset.
func (v *FieldTag) GetValue() (o string) {
	if v.Value != nil {
		return *v.Value
	}

	return
}

type _Map_String_Value_MapItemList map[string]*Value

func (m _Map_String_Value_MapItemList) ForEach(f func(wire.MapItem) error) error {
	for k, v := range m {
		if v == nil {
			return fmt.Errorf("invalid [%v]: value is nil", k)
		}
		kw, err := wire.NewValueString(k), error(nil)
		if err != nil {
			return err
		}

		vw, err := v.ToWire()
		if err != nil {
			return err
		}
		err = f(wire.MapItem{Key: kw, Value: vw})
		if err != nil {
			return err
		}
	}
	return nil
}

func (m _Map_String_Value_MapItemList) Size() int {
	return len(m)
}

func (_Map_String_Value_MapItemList) KeyType() wire.Type {
	return wire.TBinary
}

func (_Map_String_Value_MapItemList) ValueType() wire.Type {
	return wire.TStruct
}

func (_Map_String_Value_MapItemList) Close() {}

func _Map_String_Value_Read(m wire.MapItemList) (map[string]*Value, error) {
	if m.KeyType() != wire.TBinary {
		return nil, nil
	}

	if m.ValueType() != wire.TStruct {
		return nil, nil
	}

	o := make(map[string]*Value, m.Size())
	err := m.ForEach(func(x wire.MapItem) error {
		k, err := x.Key.GetString(), error(nil)
		if err != nil {
			return err
		}

		v, err := _Value_Read(x.Value)
		if err != nil {
			return err
		}

		o[k] = v
		return nil
	})
	m.Close()
	return o, err
}

func _Map_String_Value_Equals(lhs, rhs map[string]*Value) bool {
	if len(lhs) != len(rhs) {
		return false
	}

	for lk, lv := range lhs {
		rv, ok := rhs[lk]
		if !ok {
			return false
		}
		if !lv.Equals(rv) {
			return false
		}
	}
	return true
}

type FieldValueMap map[string]*Value

// ToWire translates FieldValueMap into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
func (v FieldValueMap) ToWire() (wire.Value, error) {
	x := (map[string]*Value)(v)
	return wire.NewValueMap(_Map_String_Value_MapItemList(x)), error(nil)
}

// String returns a readable string representation of FieldValueMap.
func (v FieldValueMap) String() string {
	x := (map[string]*Value)(v)
	return fmt.Sprint(x)
}

// FromWire deserializes FieldValueMap from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
func (v *FieldValueMap) FromWire(w wire.Value) error {
	x, err := _Map_String_Value_Read(w.GetMap())
	*v = (FieldValueMap)(x)
	return err
}

// Equals returns true if this FieldValueMap is equal to the provided
// FieldValueMap.
func (lhs FieldValueMap) Equals(rhs FieldValueMap) bool {
	return _Map_String_Value_Equals(lhs, rhs)
}

type IndexDefinition struct {
	Key *PrimaryKey `json:"key,omitempty"`
}

// ToWire translates a IndexDefinition struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *IndexDefinition) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Key != nil {
		w, err = v.Key.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a IndexDefinition struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a IndexDefinition struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v IndexDefinition
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *IndexDefinition) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TStruct {
				v.Key, err = _PrimaryKey_Read(field.Value)
				if err != nil {
					return err
				}

			}
		}
	}

	return nil
}

// String returns a readable string representation of a IndexDefinition
// struct.
func (v *IndexDefinition) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [1]string
	i := 0
	if v.Key != nil {
		fields[i] = fmt.Sprintf("Key: %v", v.Key)
		i++
	}

	return fmt.Sprintf("IndexDefinition{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this IndexDefinition match the
// provided IndexDefinition.
//
// This function performs a deep comparison.
func (v *IndexDefinition) Equals(rhs *IndexDefinition) bool {
	if !((v.Key == nil && rhs.Key == nil) || (v.Key != nil && rhs.Key != nil && v.Key.Equals(rhs.Key))) {
		return false
	}

	return true
}

type InternalServerError struct {
	Err       string  `json:"err,required"`
	Message   *string `json:"message,omitempty"`
	ErrorCode *int32  `json:"errorCode,omitempty"`
}

// ToWire translates a InternalServerError struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *InternalServerError) ToWire() (wire.Value, error) {
	var (
		fields [3]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	w, err = wire.NewValueString(v.Err), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 1, Value: w}
	i++
	if v.Message != nil {
		w, err = wire.NewValueString(*(v.Message)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}
	if v.ErrorCode != nil {
		w, err = wire.NewValueI32(*(v.ErrorCode)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 3, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a InternalServerError struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a InternalServerError struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v InternalServerError
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *InternalServerError) FromWire(w wire.Value) error {
	var err error

	errIsSet := false

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				v.Err, err = field.Value.GetString(), error(nil)
				if err != nil {
					return err
				}
				errIsSet = true
			}
		case 2:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Message = &x
				if err != nil {
					return err
				}

			}
		case 3:
			if field.Value.Type() == wire.TI32 {
				var x int32
				x, err = field.Value.GetI32(), error(nil)
				v.ErrorCode = &x
				if err != nil {
					return err
				}

			}
		}
	}

	if !errIsSet {
		return errors.New("field Err of InternalServerError is required")
	}

	return nil
}

// String returns a readable string representation of a InternalServerError
// struct.
func (v *InternalServerError) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [3]string
	i := 0
	fields[i] = fmt.Sprintf("Err: %v", v.Err)
	i++
	if v.Message != nil {
		fields[i] = fmt.Sprintf("Message: %v", *(v.Message))
		i++
	}
	if v.ErrorCode != nil {
		fields[i] = fmt.Sprintf("ErrorCode: %v", *(v.ErrorCode))
		i++
	}

	return fmt.Sprintf("InternalServerError{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this InternalServerError match the
// provided InternalServerError.
//
// This function performs a deep comparison.
func (v *InternalServerError) Equals(rhs *InternalServerError) bool {
	if !(v.Err == rhs.Err) {
		return false
	}
	if !_String_EqualsPtr(v.Message, rhs.Message) {
		return false
	}
	if !_I32_EqualsPtr(v.ErrorCode, rhs.ErrorCode) {
		return false
	}

	return true
}

// GetMessage returns the value of Message if it is set or its
// zero value if it is unset.
func (v *InternalServerError) GetMessage() (o string) {
	if v.Message != nil {
		return *v.Message
	}

	return
}

// GetErrorCode returns the value of ErrorCode if it is set or its
// zero value if it is unset.
func (v *InternalServerError) GetErrorCode() (o int32) {
	if v.ErrorCode != nil {
		return *v.ErrorCode
	}

	return
}

func (v *InternalServerError) Error() string {
	return v.String()
}

type MultiReadRequest struct {
	Ref          *SchemaRef          `json:"ref,omitempty"`
	KeyValues    []FieldValueMap     `json:"keyValues,omitempty"`
	FieldsToRead map[string]struct{} `json:"fieldsToRead,omitempty"`
}

type _List_FieldValueMap_ValueList []FieldValueMap

func (v _List_FieldValueMap_ValueList) ForEach(f func(wire.Value) error) error {
	for i, x := range v {
		if x == nil {
			return fmt.Errorf("invalid [%v]: value is nil", i)
		}
		w, err := x.ToWire()
		if err != nil {
			return err
		}
		err = f(w)
		if err != nil {
			return err
		}
	}
	return nil
}

func (v _List_FieldValueMap_ValueList) Size() int {
	return len(v)
}

func (_List_FieldValueMap_ValueList) ValueType() wire.Type {
	return wire.TMap
}

func (_List_FieldValueMap_ValueList) Close() {}

type _Set_String_ValueList map[string]struct{}

func (v _Set_String_ValueList) ForEach(f func(wire.Value) error) error {
	for x := range v {
		w, err := wire.NewValueString(x), error(nil)
		if err != nil {
			return err
		}

		if err := f(w); err != nil {
			return err
		}
	}
	return nil
}

func (v _Set_String_ValueList) Size() int {
	return len(v)
}

func (_Set_String_ValueList) ValueType() wire.Type {
	return wire.TBinary
}

func (_Set_String_ValueList) Close() {}

// ToWire translates a MultiReadRequest struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *MultiReadRequest) ToWire() (wire.Value, error) {
	var (
		fields [3]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Ref != nil {
		w, err = v.Ref.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	if v.KeyValues != nil {
		w, err = wire.NewValueList(_List_FieldValueMap_ValueList(v.KeyValues)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}
	if v.FieldsToRead != nil {
		w, err = wire.NewValueSet(_Set_String_ValueList(v.FieldsToRead)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 3, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _List_FieldValueMap_Read(l wire.ValueList) ([]FieldValueMap, error) {
	if l.ValueType() != wire.TMap {
		return nil, nil
	}

	o := make([]FieldValueMap, 0, l.Size())
	err := l.ForEach(func(x wire.Value) error {
		i, err := _FieldValueMap_Read(x)
		if err != nil {
			return err
		}
		o = append(o, i)
		return nil
	})
	l.Close()
	return o, err
}

func _Set_String_Read(s wire.ValueList) (map[string]struct{}, error) {
	if s.ValueType() != wire.TBinary {
		return nil, nil
	}

	o := make(map[string]struct{}, s.Size())
	err := s.ForEach(func(x wire.Value) error {
		i, err := x.GetString(), error(nil)
		if err != nil {
			return err
		}

		o[i] = struct{}{}
		return nil
	})
	s.Close()
	return o, err
}

// FromWire deserializes a MultiReadRequest struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a MultiReadRequest struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v MultiReadRequest
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *MultiReadRequest) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TStruct {
				v.Ref, err = _SchemaRef_Read(field.Value)
				if err != nil {
					return err
				}

			}
		case 2:
			if field.Value.Type() == wire.TList {
				v.KeyValues, err = _List_FieldValueMap_Read(field.Value.GetList())
				if err != nil {
					return err
				}

			}
		case 3:
			if field.Value.Type() == wire.TSet {
				v.FieldsToRead, err = _Set_String_Read(field.Value.GetSet())
				if err != nil {
					return err
				}

			}
		}
	}

	return nil
}

// String returns a readable string representation of a MultiReadRequest
// struct.
func (v *MultiReadRequest) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [3]string
	i := 0
	if v.Ref != nil {
		fields[i] = fmt.Sprintf("Ref: %v", v.Ref)
		i++
	}
	if v.KeyValues != nil {
		fields[i] = fmt.Sprintf("KeyValues: %v", v.KeyValues)
		i++
	}
	if v.FieldsToRead != nil {
		fields[i] = fmt.Sprintf("FieldsToRead: %v", v.FieldsToRead)
		i++
	}

	return fmt.Sprintf("MultiReadRequest{%v}", strings.Join(fields[:i], ", "))
}

func _List_FieldValueMap_Equals(lhs, rhs []FieldValueMap) bool {
	if len(lhs) != len(rhs) {
		return false
	}

	for i, lv := range lhs {
		rv := rhs[i]
		if !lv.Equals(rv) {
			return false
		}
	}

	return true
}

func _Set_String_Equals(lhs, rhs map[string]struct{}) bool {
	if len(lhs) != len(rhs) {
		return false
	}

	for x := range rhs {
		if _, ok := lhs[x]; !ok {
			return false
		}
	}

	return true
}

// Equals returns true if all the fields of this MultiReadRequest match the
// provided MultiReadRequest.
//
// This function performs a deep comparison.
func (v *MultiReadRequest) Equals(rhs *MultiReadRequest) bool {
	if !((v.Ref == nil && rhs.Ref == nil) || (v.Ref != nil && rhs.Ref != nil && v.Ref.Equals(rhs.Ref))) {
		return false
	}
	if !((v.KeyValues == nil && rhs.KeyValues == nil) || (v.KeyValues != nil && rhs.KeyValues != nil && _List_FieldValueMap_Equals(v.KeyValues, rhs.KeyValues))) {
		return false
	}
	if !((v.FieldsToRead == nil && rhs.FieldsToRead == nil) || (v.FieldsToRead != nil && rhs.FieldsToRead != nil && _Set_String_Equals(v.FieldsToRead, rhs.FieldsToRead))) {
		return false
	}

	return true
}

type MultiReadResponse struct {
	Results []*EntityOrError `json:"results,omitempty"`
}

type _List_EntityOrError_ValueList []*EntityOrError

func (v _List_EntityOrError_ValueList) ForEach(f func(wire.Value) error) error {
	for i, x := range v {
		if x == nil {
			return fmt.Errorf("invalid [%v]: value is nil", i)
		}
		w, err := x.ToWire()
		if err != nil {
			return err
		}
		err = f(w)
		if err != nil {
			return err
		}
	}
	return nil
}

func (v _List_EntityOrError_ValueList) Size() int {
	return len(v)
}

func (_List_EntityOrError_ValueList) ValueType() wire.Type {
	return wire.TStruct
}

func (_List_EntityOrError_ValueList) Close() {}

// ToWire translates a MultiReadResponse struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *MultiReadResponse) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Results != nil {
		w, err = wire.NewValueList(_List_EntityOrError_ValueList(v.Results)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _EntityOrError_Read(w wire.Value) (*EntityOrError, error) {
	var v EntityOrError
	err := v.FromWire(w)
	return &v, err
}

func _List_EntityOrError_Read(l wire.ValueList) ([]*EntityOrError, error) {
	if l.ValueType() != wire.TStruct {
		return nil, nil
	}

	o := make([]*EntityOrError, 0, l.Size())
	err := l.ForEach(func(x wire.Value) error {
		i, err := _EntityOrError_Read(x)
		if err != nil {
			return err
		}
		o = append(o, i)
		return nil
	})
	l.Close()
	return o, err
}

// FromWire deserializes a MultiReadResponse struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a MultiReadResponse struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v MultiReadResponse
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *MultiReadResponse) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TList {
				v.Results, err = _List_EntityOrError_Read(field.Value.GetList())
				if err != nil {
					return err
				}

			}
		}
	}

	return nil
}

// String returns a readable string representation of a MultiReadResponse
// struct.
func (v *MultiReadResponse) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [1]string
	i := 0
	if v.Results != nil {
		fields[i] = fmt.Sprintf("Results: %v", v.Results)
		i++
	}

	return fmt.Sprintf("MultiReadResponse{%v}", strings.Join(fields[:i], ", "))
}

func _List_EntityOrError_Equals(lhs, rhs []*EntityOrError) bool {
	if len(lhs) != len(rhs) {
		return false
	}

	for i, lv := range lhs {
		rv := rhs[i]
		if !lv.Equals(rv) {
			return false
		}
	}

	return true
}

// Equals returns true if all the fields of this MultiReadResponse match the
// provided MultiReadResponse.
//
// This function performs a deep comparison.
func (v *MultiReadResponse) Equals(rhs *MultiReadResponse) bool {
	if !((v.Results == nil && rhs.Results == nil) || (v.Results != nil && rhs.Results != nil && _List_EntityOrError_Equals(v.Results, rhs.Results))) {
		return false
	}

	return true
}

type MultiRemoveRequest struct {
	Ref       *SchemaRef      `json:"ref,omitempty"`
	KeyValues []FieldValueMap `json:"keyValues,omitempty"`
}

// ToWire translates a MultiRemoveRequest struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *MultiRemoveRequest) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Ref != nil {
		w, err = v.Ref.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	if v.KeyValues != nil {
		w, err = wire.NewValueList(_List_FieldValueMap_ValueList(v.KeyValues)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a MultiRemoveRequest struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a MultiRemoveRequest struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v MultiRemoveRequest
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *MultiRemoveRequest) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TStruct {
				v.Ref, err = _SchemaRef_Read(field.Value)
				if err != nil {
					return err
				}

			}
		case 2:
			if field.Value.Type() == wire.TList {
				v.KeyValues, err = _List_FieldValueMap_Read(field.Value.GetList())
				if err != nil {
					return err
				}

			}
		}
	}

	return nil
}

// String returns a readable string representation of a MultiRemoveRequest
// struct.
func (v *MultiRemoveRequest) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [2]string
	i := 0
	if v.Ref != nil {
		fields[i] = fmt.Sprintf("Ref: %v", v.Ref)
		i++
	}
	if v.KeyValues != nil {
		fields[i] = fmt.Sprintf("KeyValues: %v", v.KeyValues)
		i++
	}

	return fmt.Sprintf("MultiRemoveRequest{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this MultiRemoveRequest match the
// provided MultiRemoveRequest.
//
// This function performs a deep comparison.
func (v *MultiRemoveRequest) Equals(rhs *MultiRemoveRequest) bool {
	if !((v.Ref == nil && rhs.Ref == nil) || (v.Ref != nil && rhs.Ref != nil && v.Ref.Equals(rhs.Ref))) {
		return false
	}
	if !((v.KeyValues == nil && rhs.KeyValues == nil) || (v.KeyValues != nil && rhs.KeyValues != nil && _List_FieldValueMap_Equals(v.KeyValues, rhs.KeyValues))) {
		return false
	}

	return true
}

type MultiRemoveResponse struct {
	Errors []*Error `json:"errors,omitempty"`
}

type _List_Error_ValueList []*Error

func (v _List_Error_ValueList) ForEach(f func(wire.Value) error) error {
	for i, x := range v {
		if x == nil {
			return fmt.Errorf("invalid [%v]: value is nil", i)
		}
		w, err := x.ToWire()
		if err != nil {
			return err
		}
		err = f(w)
		if err != nil {
			return err
		}
	}
	return nil
}

func (v _List_Error_ValueList) Size() int {
	return len(v)
}

func (_List_Error_ValueList) ValueType() wire.Type {
	return wire.TStruct
}

func (_List_Error_ValueList) Close() {}

// ToWire translates a MultiRemoveResponse struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *MultiRemoveResponse) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Errors != nil {
		w, err = wire.NewValueList(_List_Error_ValueList(v.Errors)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _List_Error_Read(l wire.ValueList) ([]*Error, error) {
	if l.ValueType() != wire.TStruct {
		return nil, nil
	}

	o := make([]*Error, 0, l.Size())
	err := l.ForEach(func(x wire.Value) error {
		i, err := _Error_Read(x)
		if err != nil {
			return err
		}
		o = append(o, i)
		return nil
	})
	l.Close()
	return o, err
}

// FromWire deserializes a MultiRemoveResponse struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a MultiRemoveResponse struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v MultiRemoveResponse
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *MultiRemoveResponse) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TList {
				v.Errors, err = _List_Error_Read(field.Value.GetList())
				if err != nil {
					return err
				}

			}
		}
	}

	return nil
}

// String returns a readable string representation of a MultiRemoveResponse
// struct.
func (v *MultiRemoveResponse) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [1]string
	i := 0
	if v.Errors != nil {
		fields[i] = fmt.Sprintf("Errors: %v", v.Errors)
		i++
	}

	return fmt.Sprintf("MultiRemoveResponse{%v}", strings.Join(fields[:i], ", "))
}

func _List_Error_Equals(lhs, rhs []*Error) bool {
	if len(lhs) != len(rhs) {
		return false
	}

	for i, lv := range lhs {
		rv := rhs[i]
		if !lv.Equals(rv) {
			return false
		}
	}

	return true
}

// Equals returns true if all the fields of this MultiRemoveResponse match the
// provided MultiRemoveResponse.
//
// This function performs a deep comparison.
func (v *MultiRemoveResponse) Equals(rhs *MultiRemoveResponse) bool {
	if !((v.Errors == nil && rhs.Errors == nil) || (v.Errors != nil && rhs.Errors != nil && _List_Error_Equals(v.Errors, rhs.Errors))) {
		return false
	}

	return true
}

type MultiUpsertRequest struct {
	Ref      *SchemaRef      `json:"ref,omitempty"`
	Entities []FieldValueMap `json:"entities,omitempty"`
}

// ToWire translates a MultiUpsertRequest struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *MultiUpsertRequest) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Ref != nil {
		w, err = v.Ref.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	if v.Entities != nil {
		w, err = wire.NewValueList(_List_FieldValueMap_ValueList(v.Entities)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a MultiUpsertRequest struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a MultiUpsertRequest struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v MultiUpsertRequest
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *MultiUpsertRequest) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TStruct {
				v.Ref, err = _SchemaRef_Read(field.Value)
				if err != nil {
					return err
				}

			}
		case 2:
			if field.Value.Type() == wire.TList {
				v.Entities, err = _List_FieldValueMap_Read(field.Value.GetList())
				if err != nil {
					return err
				}

			}
		}
	}

	return nil
}

// String returns a readable string representation of a MultiUpsertRequest
// struct.
func (v *MultiUpsertRequest) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [2]string
	i := 0
	if v.Ref != nil {
		fields[i] = fmt.Sprintf("Ref: %v", v.Ref)
		i++
	}
	if v.Entities != nil {
		fields[i] = fmt.Sprintf("Entities: %v", v.Entities)
		i++
	}

	return fmt.Sprintf("MultiUpsertRequest{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this MultiUpsertRequest match the
// provided MultiUpsertRequest.
//
// This function performs a deep comparison.
func (v *MultiUpsertRequest) Equals(rhs *MultiUpsertRequest) bool {
	if !((v.Ref == nil && rhs.Ref == nil) || (v.Ref != nil && rhs.Ref != nil && v.Ref.Equals(rhs.Ref))) {
		return false
	}
	if !((v.Entities == nil && rhs.Entities == nil) || (v.Entities != nil && rhs.Entities != nil && _List_FieldValueMap_Equals(v.Entities, rhs.Entities))) {
		return false
	}

	return true
}

type MultiUpsertResponse struct {
	Errors []*Error `json:"errors,omitempty"`
}

// ToWire translates a MultiUpsertResponse struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *MultiUpsertResponse) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Errors != nil {
		w, err = wire.NewValueList(_List_Error_ValueList(v.Errors)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a MultiUpsertResponse struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a MultiUpsertResponse struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v MultiUpsertResponse
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *MultiUpsertResponse) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TList {
				v.Errors, err = _List_Error_Read(field.Value.GetList())
				if err != nil {
					return err
				}

			}
		}
	}

	return nil
}

// String returns a readable string representation of a MultiUpsertResponse
// struct.
func (v *MultiUpsertResponse) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [1]string
	i := 0
	if v.Errors != nil {
		fields[i] = fmt.Sprintf("Errors: %v", v.Errors)
		i++
	}

	return fmt.Sprintf("MultiUpsertResponse{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this MultiUpsertResponse match the
// provided MultiUpsertResponse.
//
// This function performs a deep comparison.
func (v *MultiUpsertResponse) Equals(rhs *MultiUpsertResponse) bool {
	if !((v.Errors == nil && rhs.Errors == nil) || (v.Errors != nil && rhs.Errors != nil && _List_Error_Equals(v.Errors, rhs.Errors))) {
		return false
	}

	return true
}

type Operator int32

const (
	OperatorEq     Operator = 0
	OperatorLt     Operator = 1
	OperatorGt     Operator = 2
	OperatorLtOrEq Operator = 3
	OperatorGtOrEq Operator = 4
)

// Operator_Values returns all recognized values of Operator.
func Operator_Values() []Operator {
	return []Operator{
		OperatorEq,
		OperatorLt,
		OperatorGt,
		OperatorLtOrEq,
		OperatorGtOrEq,
	}
}

// UnmarshalText tries to decode Operator from a byte slice
// containing its name.
//
//   var v Operator
//   err := v.UnmarshalText([]byte("EQ"))
func (v *Operator) UnmarshalText(value []byte) error {
	switch string(value) {
	case "EQ":
		*v = OperatorEq
		return nil
	case "LT":
		*v = OperatorLt
		return nil
	case "GT":
		*v = OperatorGt
		return nil
	case "LT_OR_EQ":
		*v = OperatorLtOrEq
		return nil
	case "GT_OR_EQ":
		*v = OperatorGtOrEq
		return nil
	default:
		return fmt.Errorf("unknown enum value %q for %q", value, "Operator")
	}
}

// Ptr returns a pointer to this enum value.
func (v Operator) Ptr() *Operator {
	return &v
}

// ToWire translates Operator into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// Enums are represented as 32-bit integers over the wire.
func (v Operator) ToWire() (wire.Value, error) {
	return wire.NewValueI32(int32(v)), nil
}

// FromWire deserializes Operator from its Thrift-level
// representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TI32)
//   if err != nil {
//     return Operator(0), err
//   }
//
//   var v Operator
//   if err := v.FromWire(x); err != nil {
//     return Operator(0), err
//   }
//   return v, nil
func (v *Operator) FromWire(w wire.Value) error {
	*v = (Operator)(w.GetI32())
	return nil
}

// String returns a readable string representation of Operator.
func (v Operator) String() string {
	w := int32(v)
	switch w {
	case 0:
		return "EQ"
	case 1:
		return "LT"
	case 2:
		return "GT"
	case 3:
		return "LT_OR_EQ"
	case 4:
		return "GT_OR_EQ"
	}
	return fmt.Sprintf("Operator(%d)", w)
}

// Equals returns true if this Operator value matches the provided
// value.
func (v Operator) Equals(rhs Operator) bool {
	return v == rhs
}

// MarshalJSON serializes Operator into JSON.
//
// If the enum value is recognized, its name is returned. Otherwise,
// its integer value is returned.
//
// This implements json.Marshaler.
func (v Operator) MarshalJSON() ([]byte, error) {
	switch int32(v) {
	case 0:
		return ([]byte)("\"EQ\""), nil
	case 1:
		return ([]byte)("\"LT\""), nil
	case 2:
		return ([]byte)("\"GT\""), nil
	case 3:
		return ([]byte)("\"LT_OR_EQ\""), nil
	case 4:
		return ([]byte)("\"GT_OR_EQ\""), nil
	}
	return ([]byte)(strconv.FormatInt(int64(v), 10)), nil
}

// UnmarshalJSON attempts to decode Operator from its JSON
// representation.
//
// This implementation supports both, numeric and string inputs. If a
// string is provided, it must be a known enum name.
//
// This implements json.Unmarshaler.
func (v *Operator) UnmarshalJSON(text []byte) error {
	d := json.NewDecoder(bytes.NewReader(text))
	d.UseNumber()
	t, err := d.Token()
	if err != nil {
		return err
	}

	switch w := t.(type) {
	case json.Number:
		x, err := w.Int64()
		if err != nil {
			return err
		}
		if x > math.MaxInt32 {
			return fmt.Errorf("enum overflow from JSON %q for %q", text, "Operator")
		}
		if x < math.MinInt32 {
			return fmt.Errorf("enum underflow from JSON %q for %q", text, "Operator")
		}
		*v = (Operator)(x)
		return nil
	case string:
		return v.UnmarshalText([]byte(w))
	default:
		return fmt.Errorf("invalid JSON value %q (%T) to unmarshal into %q", t, t, "Operator")
	}
}

type PrimaryKey struct {
	PartitionKeys  []string         `json:"partitionKeys,omitempty"`
	ClusteringKeys []*ClusteringKey `json:"clusteringKeys,omitempty"`
}

type _List_String_ValueList []string

func (v _List_String_ValueList) ForEach(f func(wire.Value) error) error {
	for _, x := range v {
		w, err := wire.NewValueString(x), error(nil)
		if err != nil {
			return err
		}
		err = f(w)
		if err != nil {
			return err
		}
	}
	return nil
}

func (v _List_String_ValueList) Size() int {
	return len(v)
}

func (_List_String_ValueList) ValueType() wire.Type {
	return wire.TBinary
}

func (_List_String_ValueList) Close() {}

type _List_ClusteringKey_ValueList []*ClusteringKey

func (v _List_ClusteringKey_ValueList) ForEach(f func(wire.Value) error) error {
	for i, x := range v {
		if x == nil {
			return fmt.Errorf("invalid [%v]: value is nil", i)
		}
		w, err := x.ToWire()
		if err != nil {
			return err
		}
		err = f(w)
		if err != nil {
			return err
		}
	}
	return nil
}

func (v _List_ClusteringKey_ValueList) Size() int {
	return len(v)
}

func (_List_ClusteringKey_ValueList) ValueType() wire.Type {
	return wire.TStruct
}

func (_List_ClusteringKey_ValueList) Close() {}

// ToWire translates a PrimaryKey struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *PrimaryKey) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.PartitionKeys != nil {
		w, err = wire.NewValueList(_List_String_ValueList(v.PartitionKeys)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	if v.ClusteringKeys != nil {
		w, err = wire.NewValueList(_List_ClusteringKey_ValueList(v.ClusteringKeys)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _List_String_Read(l wire.ValueList) ([]string, error) {
	if l.ValueType() != wire.TBinary {
		return nil, nil
	}

	o := make([]string, 0, l.Size())
	err := l.ForEach(func(x wire.Value) error {
		i, err := x.GetString(), error(nil)
		if err != nil {
			return err
		}
		o = append(o, i)
		return nil
	})
	l.Close()
	return o, err
}

func _ClusteringKey_Read(w wire.Value) (*ClusteringKey, error) {
	var v ClusteringKey
	err := v.FromWire(w)
	return &v, err
}

func _List_ClusteringKey_Read(l wire.ValueList) ([]*ClusteringKey, error) {
	if l.ValueType() != wire.TStruct {
		return nil, nil
	}

	o := make([]*ClusteringKey, 0, l.Size())
	err := l.ForEach(func(x wire.Value) error {
		i, err := _ClusteringKey_Read(x)
		if err != nil {
			return err
		}
		o = append(o, i)
		return nil
	})
	l.Close()
	return o, err
}

// FromWire deserializes a PrimaryKey struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a PrimaryKey struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v PrimaryKey
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *PrimaryKey) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TList {
				v.PartitionKeys, err = _List_String_Read(field.Value.GetList())
				if err != nil {
					return err
				}

			}
		case 2:
			if field.Value.Type() == wire.TList {
				v.ClusteringKeys, err = _List_ClusteringKey_Read(field.Value.GetList())
				if err != nil {
					return err
				}

			}
		}
	}

	return nil
}

// String returns a readable string representation of a PrimaryKey
// struct.
func (v *PrimaryKey) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [2]string
	i := 0
	if v.PartitionKeys != nil {
		fields[i] = fmt.Sprintf("PartitionKeys: %v", v.PartitionKeys)
		i++
	}
	if v.ClusteringKeys != nil {
		fields[i] = fmt.Sprintf("ClusteringKeys: %v", v.ClusteringKeys)
		i++
	}

	return fmt.Sprintf("PrimaryKey{%v}", strings.Join(fields[:i], ", "))
}

func _List_String_Equals(lhs, rhs []string) bool {
	if len(lhs) != len(rhs) {
		return false
	}

	for i, lv := range lhs {
		rv := rhs[i]
		if !(lv == rv) {
			return false
		}
	}

	return true
}

func _List_ClusteringKey_Equals(lhs, rhs []*ClusteringKey) bool {
	if len(lhs) != len(rhs) {
		return false
	}

	for i, lv := range lhs {
		rv := rhs[i]
		if !lv.Equals(rv) {
			return false
		}
	}

	return true
}

// Equals returns true if all the fields of this PrimaryKey match the
// provided PrimaryKey.
//
// This function performs a deep comparison.
func (v *PrimaryKey) Equals(rhs *PrimaryKey) bool {
	if !((v.PartitionKeys == nil && rhs.PartitionKeys == nil) || (v.PartitionKeys != nil && rhs.PartitionKeys != nil && _List_String_Equals(v.PartitionKeys, rhs.PartitionKeys))) {
		return false
	}
	if !((v.ClusteringKeys == nil && rhs.ClusteringKeys == nil) || (v.ClusteringKeys != nil && rhs.ClusteringKeys != nil && _List_ClusteringKey_Equals(v.ClusteringKeys, rhs.ClusteringKeys))) {
		return false
	}

	return true
}

type RangeRequest struct {
	Ref          *SchemaRef          `json:"ref,omitempty"`
	Token        *string             `json:"token,omitempty"`
	Limit        *int32              `json:"limit,omitempty"`
	Conditions   []*Condition        `json:"conditions,omitempty"`
	FieldsToRead map[string]struct{} `json:"fieldsToRead,omitempty"`
}

type _List_Condition_ValueList []*Condition

func (v _List_Condition_ValueList) ForEach(f func(wire.Value) error) error {
	for i, x := range v {
		if x == nil {
			return fmt.Errorf("invalid [%v]: value is nil", i)
		}
		w, err := x.ToWire()
		if err != nil {
			return err
		}
		err = f(w)
		if err != nil {
			return err
		}
	}
	return nil
}

func (v _List_Condition_ValueList) Size() int {
	return len(v)
}

func (_List_Condition_ValueList) ValueType() wire.Type {
	return wire.TStruct
}

func (_List_Condition_ValueList) Close() {}

// ToWire translates a RangeRequest struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *RangeRequest) ToWire() (wire.Value, error) {
	var (
		fields [5]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Ref != nil {
		w, err = v.Ref.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	if v.Token != nil {
		w, err = wire.NewValueString(*(v.Token)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}
	if v.Limit != nil {
		w, err = wire.NewValueI32(*(v.Limit)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 3, Value: w}
		i++
	}
	if v.Conditions != nil {
		w, err = wire.NewValueList(_List_Condition_ValueList(v.Conditions)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 4, Value: w}
		i++
	}
	if v.FieldsToRead != nil {
		w, err = wire.NewValueSet(_Set_String_ValueList(v.FieldsToRead)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 5, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _Condition_Read(w wire.Value) (*Condition, error) {
	var v Condition
	err := v.FromWire(w)
	return &v, err
}

func _List_Condition_Read(l wire.ValueList) ([]*Condition, error) {
	if l.ValueType() != wire.TStruct {
		return nil, nil
	}

	o := make([]*Condition, 0, l.Size())
	err := l.ForEach(func(x wire.Value) error {
		i, err := _Condition_Read(x)
		if err != nil {
			return err
		}
		o = append(o, i)
		return nil
	})
	l.Close()
	return o, err
}

// FromWire deserializes a RangeRequest struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a RangeRequest struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v RangeRequest
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *RangeRequest) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TStruct {
				v.Ref, err = _SchemaRef_Read(field.Value)
				if err != nil {
					return err
				}

			}
		case 2:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Token = &x
				if err != nil {
					return err
				}

			}
		case 3:
			if field.Value.Type() == wire.TI32 {
				var x int32
				x, err = field.Value.GetI32(), error(nil)
				v.Limit = &x
				if err != nil {
					return err
				}

			}
		case 4:
			if field.Value.Type() == wire.TList {
				v.Conditions, err = _List_Condition_Read(field.Value.GetList())
				if err != nil {
					return err
				}

			}
		case 5:
			if field.Value.Type() == wire.TSet {
				v.FieldsToRead, err = _Set_String_Read(field.Value.GetSet())
				if err != nil {
					return err
				}

			}
		}
	}

	return nil
}

// String returns a readable string representation of a RangeRequest
// struct.
func (v *RangeRequest) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [5]string
	i := 0
	if v.Ref != nil {
		fields[i] = fmt.Sprintf("Ref: %v", v.Ref)
		i++
	}
	if v.Token != nil {
		fields[i] = fmt.Sprintf("Token: %v", *(v.Token))
		i++
	}
	if v.Limit != nil {
		fields[i] = fmt.Sprintf("Limit: %v", *(v.Limit))
		i++
	}
	if v.Conditions != nil {
		fields[i] = fmt.Sprintf("Conditions: %v", v.Conditions)
		i++
	}
	if v.FieldsToRead != nil {
		fields[i] = fmt.Sprintf("FieldsToRead: %v", v.FieldsToRead)
		i++
	}

	return fmt.Sprintf("RangeRequest{%v}", strings.Join(fields[:i], ", "))
}

func _List_Condition_Equals(lhs, rhs []*Condition) bool {
	if len(lhs) != len(rhs) {
		return false
	}

	for i, lv := range lhs {
		rv := rhs[i]
		if !lv.Equals(rv) {
			return false
		}
	}

	return true
}

// Equals returns true if all the fields of this RangeRequest match the
// provided RangeRequest.
//
// This function performs a deep comparison.
func (v *RangeRequest) Equals(rhs *RangeRequest) bool {
	if !((v.Ref == nil && rhs.Ref == nil) || (v.Ref != nil && rhs.Ref != nil && v.Ref.Equals(rhs.Ref))) {
		return false
	}
	if !_String_EqualsPtr(v.Token, rhs.Token) {
		return false
	}
	if !_I32_EqualsPtr(v.Limit, rhs.Limit) {
		return false
	}
	if !((v.Conditions == nil && rhs.Conditions == nil) || (v.Conditions != nil && rhs.Conditions != nil && _List_Condition_Equals(v.Conditions, rhs.Conditions))) {
		return false
	}
	if !((v.FieldsToRead == nil && rhs.FieldsToRead == nil) || (v.FieldsToRead != nil && rhs.FieldsToRead != nil && _Set_String_Equals(v.FieldsToRead, rhs.FieldsToRead))) {
		return false
	}

	return true
}

// GetToken returns the value of Token if it is set or its
// zero value if it is unset.
func (v *RangeRequest) GetToken() (o string) {
	if v.Token != nil {
		return *v.Token
	}

	return
}

// GetLimit returns the value of Limit if it is set or its
// zero value if it is unset.
func (v *RangeRequest) GetLimit() (o int32) {
	if v.Limit != nil {
		return *v.Limit
	}

	return
}

type RangeResponse struct {
	Entities  []FieldValueMap `json:"entities,omitempty"`
	NextToken *string         `json:"nextToken,omitempty"`
}

// ToWire translates a RangeResponse struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *RangeResponse) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Entities != nil {
		w, err = wire.NewValueList(_List_FieldValueMap_ValueList(v.Entities)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	if v.NextToken != nil {
		w, err = wire.NewValueString(*(v.NextToken)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a RangeResponse struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a RangeResponse struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v RangeResponse
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *RangeResponse) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TList {
				v.Entities, err = _List_FieldValueMap_Read(field.Value.GetList())
				if err != nil {
					return err
				}

			}
		case 2:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.NextToken = &x
				if err != nil {
					return err
				}

			}
		}
	}

	return nil
}

// String returns a readable string representation of a RangeResponse
// struct.
func (v *RangeResponse) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [2]string
	i := 0
	if v.Entities != nil {
		fields[i] = fmt.Sprintf("Entities: %v", v.Entities)
		i++
	}
	if v.NextToken != nil {
		fields[i] = fmt.Sprintf("NextToken: %v", *(v.NextToken))
		i++
	}

	return fmt.Sprintf("RangeResponse{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this RangeResponse match the
// provided RangeResponse.
//
// This function performs a deep comparison.
func (v *RangeResponse) Equals(rhs *RangeResponse) bool {
	if !((v.Entities == nil && rhs.Entities == nil) || (v.Entities != nil && rhs.Entities != nil && _List_FieldValueMap_Equals(v.Entities, rhs.Entities))) {
		return false
	}
	if !_String_EqualsPtr(v.NextToken, rhs.NextToken) {
		return false
	}

	return true
}

// GetNextToken returns the value of NextToken if it is set or its
// zero value if it is unset.
func (v *RangeResponse) GetNextToken() (o string) {
	if v.NextToken != nil {
		return *v.NextToken
	}

	return
}

type RawValue struct {
	BinaryValue []byte   `json:"binaryValue,omitempty"`
	BoolValue   *bool    `json:"boolValue,omitempty"`
	DoubleValue *float64 `json:"doubleValue,omitempty"`
	Int32Value  *int32   `json:"int32Value,omitempty"`
	Int64Value  *int64   `json:"int64Value,omitempty"`
	StringValue *string  `json:"stringValue,omitempty"`
}

// ToWire translates a RawValue struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *RawValue) ToWire() (wire.Value, error) {
	var (
		fields [6]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.BinaryValue != nil {
		w, err = wire.NewValueBinary(v.BinaryValue), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	if v.BoolValue != nil {
		w, err = wire.NewValueBool(*(v.BoolValue)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}
	if v.DoubleValue != nil {
		w, err = wire.NewValueDouble(*(v.DoubleValue)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 3, Value: w}
		i++
	}
	if v.Int32Value != nil {
		w, err = wire.NewValueI32(*(v.Int32Value)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 4, Value: w}
		i++
	}
	if v.Int64Value != nil {
		w, err = wire.NewValueI64(*(v.Int64Value)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 5, Value: w}
		i++
	}
	if v.StringValue != nil {
		w, err = wire.NewValueString(*(v.StringValue)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 6, Value: w}
		i++
	}

	if i != 1 {
		return wire.Value{}, fmt.Errorf("RawValue should have exactly one field: got %v fields", i)
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a RawValue struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a RawValue struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v RawValue
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *RawValue) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				v.BinaryValue, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}

			}
		case 2:
			if field.Value.Type() == wire.TBool {
				var x bool
				x, err = field.Value.GetBool(), error(nil)
				v.BoolValue = &x
				if err != nil {
					return err
				}

			}
		case 3:
			if field.Value.Type() == wire.TDouble {
				var x float64
				x, err = field.Value.GetDouble(), error(nil)
				v.DoubleValue = &x
				if err != nil {
					return err
				}

			}
		case 4:
			if field.Value.Type() == wire.TI32 {
				var x int32
				x, err = field.Value.GetI32(), error(nil)
				v.Int32Value = &x
				if err != nil {
					return err
				}

			}
		case 5:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.Int64Value = &x
				if err != nil {
					return err
				}

			}
		case 6:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.StringValue = &x
				if err != nil {
					return err
				}

			}
		}
	}

	count := 0
	if v.BinaryValue != nil {
		count++
	}
	if v.BoolValue != nil {
		count++
	}
	if v.DoubleValue != nil {
		count++
	}
	if v.Int32Value != nil {
		count++
	}
	if v.Int64Value != nil {
		count++
	}
	if v.StringValue != nil {
		count++
	}
	if count != 1 {
		return fmt.Errorf("RawValue should have exactly one field: got %v fields", count)
	}

	return nil
}

// String returns a readable string representation of a RawValue
// struct.
func (v *RawValue) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [6]string
	i := 0
	if v.BinaryValue != nil {
		fields[i] = fmt.Sprintf("BinaryValue: %v", v.BinaryValue)
		i++
	}
	if v.BoolValue != nil {
		fields[i] = fmt.Sprintf("BoolValue: %v", *(v.BoolValue))
		i++
	}
	if v.DoubleValue != nil {
		fields[i] = fmt.Sprintf("DoubleValue: %v", *(v.DoubleValue))
		i++
	}
	if v.Int32Value != nil {
		fields[i] = fmt.Sprintf("Int32Value: %v", *(v.Int32Value))
		i++
	}
	if v.Int64Value != nil {
		fields[i] = fmt.Sprintf("Int64Value: %v", *(v.Int64Value))
		i++
	}
	if v.StringValue != nil {
		fields[i] = fmt.Sprintf("StringValue: %v", *(v.StringValue))
		i++
	}

	return fmt.Sprintf("RawValue{%v}", strings.Join(fields[:i], ", "))
}

func _Double_EqualsPtr(lhs, rhs *float64) bool {
	if lhs != nil && rhs != nil {

		x := *lhs
		y := *rhs
		return (x == y)
	}
	return lhs == nil && rhs == nil
}

// Equals returns true if all the fields of this RawValue match the
// provided RawValue.
//
// This function performs a deep comparison.
func (v *RawValue) Equals(rhs *RawValue) bool {
	if !((v.BinaryValue == nil && rhs.BinaryValue == nil) || (v.BinaryValue != nil && rhs.BinaryValue != nil && bytes.Equal(v.BinaryValue, rhs.BinaryValue))) {
		return false
	}
	if !_Bool_EqualsPtr(v.BoolValue, rhs.BoolValue) {
		return false
	}
	if !_Double_EqualsPtr(v.DoubleValue, rhs.DoubleValue) {
		return false
	}
	if !_I32_EqualsPtr(v.Int32Value, rhs.Int32Value) {
		return false
	}
	if !_I64_EqualsPtr(v.Int64Value, rhs.Int64Value) {
		return false
	}
	if !_String_EqualsPtr(v.StringValue, rhs.StringValue) {
		return false
	}

	return true
}

// GetBoolValue returns the value of BoolValue if it is set or its
// zero value if it is unset.
func (v *RawValue) GetBoolValue() (o bool) {
	if v.BoolValue != nil {
		return *v.BoolValue
	}

	return
}

// GetDoubleValue returns the value of DoubleValue if it is set or its
// zero value if it is unset.
func (v *RawValue) GetDoubleValue() (o float64) {
	if v.DoubleValue != nil {
		return *v.DoubleValue
	}

	return
}

// GetInt32Value returns the value of Int32Value if it is set or its
// zero value if it is unset.
func (v *RawValue) GetInt32Value() (o int32) {
	if v.Int32Value != nil {
		return *v.Int32Value
	}

	return
}

// GetInt64Value returns the value of Int64Value if it is set or its
// zero value if it is unset.
func (v *RawValue) GetInt64Value() (o int64) {
	if v.Int64Value != nil {
		return *v.Int64Value
	}

	return
}

// GetStringValue returns the value of StringValue if it is set or its
// zero value if it is unset.
func (v *RawValue) GetStringValue() (o string) {
	if v.StringValue != nil {
		return *v.StringValue
	}

	return
}

type ReadRequest struct {
	Ref          *SchemaRef          `json:"ref,omitempty"`
	KeyValues    FieldValueMap       `json:"keyValues,omitempty"`
	FieldsToRead map[string]struct{} `json:"fieldsToRead,omitempty"`
}

// ToWire translates a ReadRequest struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *ReadRequest) ToWire() (wire.Value, error) {
	var (
		fields [3]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Ref != nil {
		w, err = v.Ref.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	if v.KeyValues != nil {
		w, err = v.KeyValues.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}
	if v.FieldsToRead != nil {
		w, err = wire.NewValueSet(_Set_String_ValueList(v.FieldsToRead)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 3, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a ReadRequest struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a ReadRequest struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v ReadRequest
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *ReadRequest) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TStruct {
				v.Ref, err = _SchemaRef_Read(field.Value)
				if err != nil {
					return err
				}

			}
		case 2:
			if field.Value.Type() == wire.TMap {
				v.KeyValues, err = _FieldValueMap_Read(field.Value)
				if err != nil {
					return err
				}

			}
		case 3:
			if field.Value.Type() == wire.TSet {
				v.FieldsToRead, err = _Set_String_Read(field.Value.GetSet())
				if err != nil {
					return err
				}

			}
		}
	}

	return nil
}

// String returns a readable string representation of a ReadRequest
// struct.
func (v *ReadRequest) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [3]string
	i := 0
	if v.Ref != nil {
		fields[i] = fmt.Sprintf("Ref: %v", v.Ref)
		i++
	}
	if v.KeyValues != nil {
		fields[i] = fmt.Sprintf("KeyValues: %v", v.KeyValues)
		i++
	}
	if v.FieldsToRead != nil {
		fields[i] = fmt.Sprintf("FieldsToRead: %v", v.FieldsToRead)
		i++
	}

	return fmt.Sprintf("ReadRequest{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this ReadRequest match the
// provided ReadRequest.
//
// This function performs a deep comparison.
func (v *ReadRequest) Equals(rhs *ReadRequest) bool {
	if !((v.Ref == nil && rhs.Ref == nil) || (v.Ref != nil && rhs.Ref != nil && v.Ref.Equals(rhs.Ref))) {
		return false
	}
	if !((v.KeyValues == nil && rhs.KeyValues == nil) || (v.KeyValues != nil && rhs.KeyValues != nil && v.KeyValues.Equals(rhs.KeyValues))) {
		return false
	}
	if !((v.FieldsToRead == nil && rhs.FieldsToRead == nil) || (v.FieldsToRead != nil && rhs.FieldsToRead != nil && _Set_String_Equals(v.FieldsToRead, rhs.FieldsToRead))) {
		return false
	}

	return true
}

type ReadResponse struct {
	EntityValues FieldValueMap `json:"entityValues,omitempty"`
}

// ToWire translates a ReadResponse struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *ReadResponse) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.EntityValues != nil {
		w, err = v.EntityValues.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a ReadResponse struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a ReadResponse struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v ReadResponse
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *ReadResponse) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TMap {
				v.EntityValues, err = _FieldValueMap_Read(field.Value)
				if err != nil {
					return err
				}

			}
		}
	}

	return nil
}

// String returns a readable string representation of a ReadResponse
// struct.
func (v *ReadResponse) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [1]string
	i := 0
	if v.EntityValues != nil {
		fields[i] = fmt.Sprintf("EntityValues: %v", v.EntityValues)
		i++
	}

	return fmt.Sprintf("ReadResponse{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this ReadResponse match the
// provided ReadResponse.
//
// This function performs a deep comparison.
func (v *ReadResponse) Equals(rhs *ReadResponse) bool {
	if !((v.EntityValues == nil && rhs.EntityValues == nil) || (v.EntityValues != nil && rhs.EntityValues != nil && v.EntityValues.Equals(rhs.EntityValues))) {
		return false
	}

	return true
}

type RemoveRangeRequest struct {
	Ref        *SchemaRef   `json:"ref,omitempty"`
	Conditions []*Condition `json:"conditions,omitempty"`
}

// ToWire translates a RemoveRangeRequest struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *RemoveRangeRequest) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Ref != nil {
		w, err = v.Ref.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	if v.Conditions != nil {
		w, err = wire.NewValueList(_List_Condition_ValueList(v.Conditions)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a RemoveRangeRequest struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a RemoveRangeRequest struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v RemoveRangeRequest
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *RemoveRangeRequest) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TStruct {
				v.Ref, err = _SchemaRef_Read(field.Value)
				if err != nil {
					return err
				}

			}
		case 2:
			if field.Value.Type() == wire.TList {
				v.Conditions, err = _List_Condition_Read(field.Value.GetList())
				if err != nil {
					return err
				}

			}
		}
	}

	return nil
}

// String returns a readable string representation of a RemoveRangeRequest
// struct.
func (v *RemoveRangeRequest) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [2]string
	i := 0
	if v.Ref != nil {
		fields[i] = fmt.Sprintf("Ref: %v", v.Ref)
		i++
	}
	if v.Conditions != nil {
		fields[i] = fmt.Sprintf("Conditions: %v", v.Conditions)
		i++
	}

	return fmt.Sprintf("RemoveRangeRequest{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this RemoveRangeRequest match the
// provided RemoveRangeRequest.
//
// This function performs a deep comparison.
func (v *RemoveRangeRequest) Equals(rhs *RemoveRangeRequest) bool {
	if !((v.Ref == nil && rhs.Ref == nil) || (v.Ref != nil && rhs.Ref != nil && v.Ref.Equals(rhs.Ref))) {
		return false
	}
	if !((v.Conditions == nil && rhs.Conditions == nil) || (v.Conditions != nil && rhs.Conditions != nil && _List_Condition_Equals(v.Conditions, rhs.Conditions))) {
		return false
	}

	return true
}

type RemoveRequest struct {
	Ref       *SchemaRef    `json:"ref,omitempty"`
	KeyValues FieldValueMap `json:"keyValues,omitempty"`
}

// ToWire translates a RemoveRequest struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *RemoveRequest) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Ref != nil {
		w, err = v.Ref.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	if v.KeyValues != nil {
		w, err = v.KeyValues.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a RemoveRequest struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a RemoveRequest struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v RemoveRequest
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *RemoveRequest) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TStruct {
				v.Ref, err = _SchemaRef_Read(field.Value)
				if err != nil {
					return err
				}

			}
		case 2:
			if field.Value.Type() == wire.TMap {
				v.KeyValues, err = _FieldValueMap_Read(field.Value)
				if err != nil {
					return err
				}

			}
		}
	}

	return nil
}

// String returns a readable string representation of a RemoveRequest
// struct.
func (v *RemoveRequest) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [2]string
	i := 0
	if v.Ref != nil {
		fields[i] = fmt.Sprintf("Ref: %v", v.Ref)
		i++
	}
	if v.KeyValues != nil {
		fields[i] = fmt.Sprintf("KeyValues: %v", v.KeyValues)
		i++
	}

	return fmt.Sprintf("RemoveRequest{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this RemoveRequest match the
// provided RemoveRequest.
//
// This function performs a deep comparison.
func (v *RemoveRequest) Equals(rhs *RemoveRequest) bool {
	if !((v.Ref == nil && rhs.Ref == nil) || (v.Ref != nil && rhs.Ref != nil && v.Ref.Equals(rhs.Ref))) {
		return false
	}
	if !((v.KeyValues == nil && rhs.KeyValues == nil) || (v.KeyValues != nil && rhs.KeyValues != nil && v.KeyValues.Equals(rhs.KeyValues))) {
		return false
	}

	return true
}

type ScanRequest struct {
	Ref          *SchemaRef          `json:"ref,omitempty"`
	Token        *string             `json:"token,omitempty"`
	Limit        *int32              `json:"limit,omitempty"`
	FieldsToRead map[string]struct{} `json:"fieldsToRead,omitempty"`
}

// ToWire translates a ScanRequest struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *ScanRequest) ToWire() (wire.Value, error) {
	var (
		fields [4]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Ref != nil {
		w, err = v.Ref.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	if v.Token != nil {
		w, err = wire.NewValueString(*(v.Token)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}
	if v.Limit != nil {
		w, err = wire.NewValueI32(*(v.Limit)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 3, Value: w}
		i++
	}
	if v.FieldsToRead != nil {
		w, err = wire.NewValueSet(_Set_String_ValueList(v.FieldsToRead)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 4, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a ScanRequest struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a ScanRequest struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v ScanRequest
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *ScanRequest) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TStruct {
				v.Ref, err = _SchemaRef_Read(field.Value)
				if err != nil {
					return err
				}

			}
		case 2:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Token = &x
				if err != nil {
					return err
				}

			}
		case 3:
			if field.Value.Type() == wire.TI32 {
				var x int32
				x, err = field.Value.GetI32(), error(nil)
				v.Limit = &x
				if err != nil {
					return err
				}

			}
		case 4:
			if field.Value.Type() == wire.TSet {
				v.FieldsToRead, err = _Set_String_Read(field.Value.GetSet())
				if err != nil {
					return err
				}

			}
		}
	}

	return nil
}

// String returns a readable string representation of a ScanRequest
// struct.
func (v *ScanRequest) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [4]string
	i := 0
	if v.Ref != nil {
		fields[i] = fmt.Sprintf("Ref: %v", v.Ref)
		i++
	}
	if v.Token != nil {
		fields[i] = fmt.Sprintf("Token: %v", *(v.Token))
		i++
	}
	if v.Limit != nil {
		fields[i] = fmt.Sprintf("Limit: %v", *(v.Limit))
		i++
	}
	if v.FieldsToRead != nil {
		fields[i] = fmt.Sprintf("FieldsToRead: %v", v.FieldsToRead)
		i++
	}

	return fmt.Sprintf("ScanRequest{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this ScanRequest match the
// provided ScanRequest.
//
// This function performs a deep comparison.
func (v *ScanRequest) Equals(rhs *ScanRequest) bool {
	if !((v.Ref == nil && rhs.Ref == nil) || (v.Ref != nil && rhs.Ref != nil && v.Ref.Equals(rhs.Ref))) {
		return false
	}
	if !_String_EqualsPtr(v.Token, rhs.Token) {
		return false
	}
	if !_I32_EqualsPtr(v.Limit, rhs.Limit) {
		return false
	}
	if !((v.FieldsToRead == nil && rhs.FieldsToRead == nil) || (v.FieldsToRead != nil && rhs.FieldsToRead != nil && _Set_String_Equals(v.FieldsToRead, rhs.FieldsToRead))) {
		return false
	}

	return true
}

// GetToken returns the value of Token if it is set or its
// zero value if it is unset.
func (v *ScanRequest) GetToken() (o string) {
	if v.Token != nil {
		return *v.Token
	}

	return
}

// GetLimit returns the value of Limit if it is set or its
// zero value if it is unset.
func (v *ScanRequest) GetLimit() (o int32) {
	if v.Limit != nil {
		return *v.Limit
	}

	return
}

type ScanResponse struct {
	Entities  []FieldValueMap `json:"entities,omitempty"`
	NextToken *string         `json:"nextToken,omitempty"`
}

// ToWire translates a ScanResponse struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *ScanResponse) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Entities != nil {
		w, err = wire.NewValueList(_List_FieldValueMap_ValueList(v.Entities)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	if v.NextToken != nil {
		w, err = wire.NewValueString(*(v.NextToken)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a ScanResponse struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a ScanResponse struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v ScanResponse
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *ScanResponse) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TList {
				v.Entities, err = _List_FieldValueMap_Read(field.Value.GetList())
				if err != nil {
					return err
				}

			}
		case 2:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.NextToken = &x
				if err != nil {
					return err
				}

			}
		}
	}

	return nil
}

// String returns a readable string representation of a ScanResponse
// struct.
func (v *ScanResponse) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [2]string
	i := 0
	if v.Entities != nil {
		fields[i] = fmt.Sprintf("Entities: %v", v.Entities)
		i++
	}
	if v.NextToken != nil {
		fields[i] = fmt.Sprintf("NextToken: %v", *(v.NextToken))
		i++
	}

	return fmt.Sprintf("ScanResponse{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this ScanResponse match the
// provided ScanResponse.
//
// This function performs a deep comparison.
func (v *ScanResponse) Equals(rhs *ScanResponse) bool {
	if !((v.Entities == nil && rhs.Entities == nil) || (v.Entities != nil && rhs.Entities != nil && _List_FieldValueMap_Equals(v.Entities, rhs.Entities))) {
		return false
	}
	if !_String_EqualsPtr(v.NextToken, rhs.NextToken) {
		return false
	}

	return true
}

// GetNextToken returns the value of NextToken if it is set or its
// zero value if it is unset.
func (v *ScanResponse) GetNextToken() (o string) {
	if v.NextToken != nil {
		return *v.NextToken
	}

	return
}

type SchemaRef struct {
	Scope      *string `json:"scope,omitempty"`
	NamePrefix *string `json:"namePrefix,omitempty"`
	EntityName *string `json:"entityName,omitempty"`
	Version    *int32  `json:"version,omitempty"`
}

// ToWire translates a SchemaRef struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *SchemaRef) ToWire() (wire.Value, error) {
	var (
		fields [4]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Scope != nil {
		w, err = wire.NewValueString(*(v.Scope)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	if v.NamePrefix != nil {
		w, err = wire.NewValueString(*(v.NamePrefix)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}
	if v.EntityName != nil {
		w, err = wire.NewValueString(*(v.EntityName)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 3, Value: w}
		i++
	}
	if v.Version != nil {
		w, err = wire.NewValueI32(*(v.Version)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 4, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a SchemaRef struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a SchemaRef struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v SchemaRef
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *SchemaRef) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Scope = &x
				if err != nil {
					return err
				}

			}
		case 2:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.NamePrefix = &x
				if err != nil {
					return err
				}

			}
		case 3:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.EntityName = &x
				if err != nil {
					return err
				}

			}
		case 4:
			if field.Value.Type() == wire.TI32 {
				var x int32
				x, err = field.Value.GetI32(), error(nil)
				v.Version = &x
				if err != nil {
					return err
				}

			}
		}
	}

	return nil
}

// String returns a readable string representation of a SchemaRef
// struct.
func (v *SchemaRef) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [4]string
	i := 0
	if v.Scope != nil {
		fields[i] = fmt.Sprintf("Scope: %v", *(v.Scope))
		i++
	}
	if v.NamePrefix != nil {
		fields[i] = fmt.Sprintf("NamePrefix: %v", *(v.NamePrefix))
		i++
	}
	if v.EntityName != nil {
		fields[i] = fmt.Sprintf("EntityName: %v", *(v.EntityName))
		i++
	}
	if v.Version != nil {
		fields[i] = fmt.Sprintf("Version: %v", *(v.Version))
		i++
	}

	return fmt.Sprintf("SchemaRef{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this SchemaRef match the
// provided SchemaRef.
//
// This function performs a deep comparison.
func (v *SchemaRef) Equals(rhs *SchemaRef) bool {
	if !_String_EqualsPtr(v.Scope, rhs.Scope) {
		return false
	}
	if !_String_EqualsPtr(v.NamePrefix, rhs.NamePrefix) {
		return false
	}
	if !_String_EqualsPtr(v.EntityName, rhs.EntityName) {
		return false
	}
	if !_I32_EqualsPtr(v.Version, rhs.Version) {
		return false
	}

	return true
}

// GetScope returns the value of Scope if it is set or its
// zero value if it is unset.
func (v *SchemaRef) GetScope() (o string) {
	if v.Scope != nil {
		return *v.Scope
	}

	return
}

// GetNamePrefix returns the value of NamePrefix if it is set or its
// zero value if it is unset.
func (v *SchemaRef) GetNamePrefix() (o string) {
	if v.NamePrefix != nil {
		return *v.NamePrefix
	}

	return
}

// GetEntityName returns the value of EntityName if it is set or its
// zero value if it is unset.
func (v *SchemaRef) GetEntityName() (o string) {
	if v.EntityName != nil {
		return *v.EntityName
	}

	return
}

// GetVersion returns the value of Version if it is set or its
// zero value if it is unset.
func (v *SchemaRef) GetVersion() (o int32) {
	if v.Version != nil {
		return *v.Version
	}

	return
}

type ScopeExistsRequest struct {
	Name *string `json:"name,omitempty"`
}

// ToWire translates a ScopeExistsRequest struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *ScopeExistsRequest) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Name != nil {
		w, err = wire.NewValueString(*(v.Name)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a ScopeExistsRequest struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a ScopeExistsRequest struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v ScopeExistsRequest
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *ScopeExistsRequest) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Name = &x
				if err != nil {
					return err
				}

			}
		}
	}

	return nil
}

// String returns a readable string representation of a ScopeExistsRequest
// struct.
func (v *ScopeExistsRequest) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [1]string
	i := 0
	if v.Name != nil {
		fields[i] = fmt.Sprintf("Name: %v", *(v.Name))
		i++
	}

	return fmt.Sprintf("ScopeExistsRequest{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this ScopeExistsRequest match the
// provided ScopeExistsRequest.
//
// This function performs a deep comparison.
func (v *ScopeExistsRequest) Equals(rhs *ScopeExistsRequest) bool {
	if !_String_EqualsPtr(v.Name, rhs.Name) {
		return false
	}

	return true
}

// GetName returns the value of Name if it is set or its
// zero value if it is unset.
func (v *ScopeExistsRequest) GetName() (o string) {
	if v.Name != nil {
		return *v.Name
	}

	return
}

type ScopeExistsResponse struct {
	Exists *bool `json:"exists,omitempty"`
}

// ToWire translates a ScopeExistsResponse struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *ScopeExistsResponse) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Exists != nil {
		w, err = wire.NewValueBool(*(v.Exists)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a ScopeExistsResponse struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a ScopeExistsResponse struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v ScopeExistsResponse
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *ScopeExistsResponse) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBool {
				var x bool
				x, err = field.Value.GetBool(), error(nil)
				v.Exists = &x
				if err != nil {
					return err
				}

			}
		}
	}

	return nil
}

// String returns a readable string representation of a ScopeExistsResponse
// struct.
func (v *ScopeExistsResponse) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [1]string
	i := 0
	if v.Exists != nil {
		fields[i] = fmt.Sprintf("Exists: %v", *(v.Exists))
		i++
	}

	return fmt.Sprintf("ScopeExistsResponse{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this ScopeExistsResponse match the
// provided ScopeExistsResponse.
//
// This function performs a deep comparison.
func (v *ScopeExistsResponse) Equals(rhs *ScopeExistsResponse) bool {
	if !_Bool_EqualsPtr(v.Exists, rhs.Exists) {
		return false
	}

	return true
}

// GetExists returns the value of Exists if it is set or its
// zero value if it is unset.
func (v *ScopeExistsResponse) GetExists() (o bool) {
	if v.Exists != nil {
		return *v.Exists
	}

	return
}

type SearchRequest struct {
	Ref          *SchemaRef          `json:"ref,omitempty"`
	Token        *string             `json:"token,omitempty"`
	Limit        *int32              `json:"limit,omitempty"`
	SearchBy     *Field              `json:"searchBy,omitempty"`
	FieldsToRead map[string]struct{} `json:"fieldsToRead,omitempty"`
}

// ToWire translates a SearchRequest struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *SearchRequest) ToWire() (wire.Value, error) {
	var (
		fields [5]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Ref != nil {
		w, err = v.Ref.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	if v.Token != nil {
		w, err = wire.NewValueString(*(v.Token)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}
	if v.Limit != nil {
		w, err = wire.NewValueI32(*(v.Limit)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 3, Value: w}
		i++
	}
	if v.SearchBy != nil {
		w, err = v.SearchBy.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 4, Value: w}
		i++
	}
	if v.FieldsToRead != nil {
		w, err = wire.NewValueSet(_Set_String_ValueList(v.FieldsToRead)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 5, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a SearchRequest struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a SearchRequest struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v SearchRequest
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *SearchRequest) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TStruct {
				v.Ref, err = _SchemaRef_Read(field.Value)
				if err != nil {
					return err
				}

			}
		case 2:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Token = &x
				if err != nil {
					return err
				}

			}
		case 3:
			if field.Value.Type() == wire.TI32 {
				var x int32
				x, err = field.Value.GetI32(), error(nil)
				v.Limit = &x
				if err != nil {
					return err
				}

			}
		case 4:
			if field.Value.Type() == wire.TStruct {
				v.SearchBy, err = _Field_Read(field.Value)
				if err != nil {
					return err
				}

			}
		case 5:
			if field.Value.Type() == wire.TSet {
				v.FieldsToRead, err = _Set_String_Read(field.Value.GetSet())
				if err != nil {
					return err
				}

			}
		}
	}

	return nil
}

// String returns a readable string representation of a SearchRequest
// struct.
func (v *SearchRequest) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [5]string
	i := 0
	if v.Ref != nil {
		fields[i] = fmt.Sprintf("Ref: %v", v.Ref)
		i++
	}
	if v.Token != nil {
		fields[i] = fmt.Sprintf("Token: %v", *(v.Token))
		i++
	}
	if v.Limit != nil {
		fields[i] = fmt.Sprintf("Limit: %v", *(v.Limit))
		i++
	}
	if v.SearchBy != nil {
		fields[i] = fmt.Sprintf("SearchBy: %v", v.SearchBy)
		i++
	}
	if v.FieldsToRead != nil {
		fields[i] = fmt.Sprintf("FieldsToRead: %v", v.FieldsToRead)
		i++
	}

	return fmt.Sprintf("SearchRequest{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this SearchRequest match the
// provided SearchRequest.
//
// This function performs a deep comparison.
func (v *SearchRequest) Equals(rhs *SearchRequest) bool {
	if !((v.Ref == nil && rhs.Ref == nil) || (v.Ref != nil && rhs.Ref != nil && v.Ref.Equals(rhs.Ref))) {
		return false
	}
	if !_String_EqualsPtr(v.Token, rhs.Token) {
		return false
	}
	if !_I32_EqualsPtr(v.Limit, rhs.Limit) {
		return false
	}
	if !((v.SearchBy == nil && rhs.SearchBy == nil) || (v.SearchBy != nil && rhs.SearchBy != nil && v.SearchBy.Equals(rhs.SearchBy))) {
		return false
	}
	if !((v.FieldsToRead == nil && rhs.FieldsToRead == nil) || (v.FieldsToRead != nil && rhs.FieldsToRead != nil && _Set_String_Equals(v.FieldsToRead, rhs.FieldsToRead))) {
		return false
	}

	return true
}

// GetToken returns the value of Token if it is set or its
// zero value if it is unset.
func (v *SearchRequest) GetToken() (o string) {
	if v.Token != nil {
		return *v.Token
	}

	return
}

// GetLimit returns the value of Limit if it is set or its
// zero value if it is unset.
func (v *SearchRequest) GetLimit() (o int32) {
	if v.Limit != nil {
		return *v.Limit
	}

	return
}

type SearchResponse struct {
	Entities  []FieldValueMap `json:"entities,omitempty"`
	NextToken *string         `json:"nextToken,omitempty"`
}

// ToWire translates a SearchResponse struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *SearchResponse) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Entities != nil {
		w, err = wire.NewValueList(_List_FieldValueMap_ValueList(v.Entities)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	if v.NextToken != nil {
		w, err = wire.NewValueString(*(v.NextToken)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a SearchResponse struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a SearchResponse struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v SearchResponse
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *SearchResponse) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TList {
				v.Entities, err = _List_FieldValueMap_Read(field.Value.GetList())
				if err != nil {
					return err
				}

			}
		case 2:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.NextToken = &x
				if err != nil {
					return err
				}

			}
		}
	}

	return nil
}

// String returns a readable string representation of a SearchResponse
// struct.
func (v *SearchResponse) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [2]string
	i := 0
	if v.Entities != nil {
		fields[i] = fmt.Sprintf("Entities: %v", v.Entities)
		i++
	}
	if v.NextToken != nil {
		fields[i] = fmt.Sprintf("NextToken: %v", *(v.NextToken))
		i++
	}

	return fmt.Sprintf("SearchResponse{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this SearchResponse match the
// provided SearchResponse.
//
// This function performs a deep comparison.
func (v *SearchResponse) Equals(rhs *SearchResponse) bool {
	if !((v.Entities == nil && rhs.Entities == nil) || (v.Entities != nil && rhs.Entities != nil && _List_FieldValueMap_Equals(v.Entities, rhs.Entities))) {
		return false
	}
	if !_String_EqualsPtr(v.NextToken, rhs.NextToken) {
		return false
	}

	return true
}

// GetNextToken returns the value of NextToken if it is set or its
// zero value if it is unset.
func (v *SearchResponse) GetNextToken() (o string) {
	if v.NextToken != nil {
		return *v.NextToken
	}

	return
}

type TruncateScopeRequest struct {
	Name *string `json:"name,omitempty"`
}

// ToWire translates a TruncateScopeRequest struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *TruncateScopeRequest) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Name != nil {
		w, err = wire.NewValueString(*(v.Name)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a TruncateScopeRequest struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a TruncateScopeRequest struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v TruncateScopeRequest
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *TruncateScopeRequest) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Name = &x
				if err != nil {
					return err
				}

			}
		}
	}

	return nil
}

// String returns a readable string representation of a TruncateScopeRequest
// struct.
func (v *TruncateScopeRequest) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [1]string
	i := 0
	if v.Name != nil {
		fields[i] = fmt.Sprintf("Name: %v", *(v.Name))
		i++
	}

	return fmt.Sprintf("TruncateScopeRequest{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this TruncateScopeRequest match the
// provided TruncateScopeRequest.
//
// This function performs a deep comparison.
func (v *TruncateScopeRequest) Equals(rhs *TruncateScopeRequest) bool {
	if !_String_EqualsPtr(v.Name, rhs.Name) {
		return false
	}

	return true
}

// GetName returns the value of Name if it is set or its
// zero value if it is unset.
func (v *TruncateScopeRequest) GetName() (o string) {
	if v.Name != nil {
		return *v.Name
	}

	return
}

type UpsertRequest struct {
	Ref          *SchemaRef    `json:"ref,omitempty"`
	EntityValues FieldValueMap `json:"entityValues,omitempty"`
	TTL          *int64        `json:"ttl,omitempty"`
}

// ToWire translates a UpsertRequest struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *UpsertRequest) ToWire() (wire.Value, error) {
	var (
		fields [3]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Ref != nil {
		w, err = v.Ref.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	if v.EntityValues != nil {
		w, err = v.EntityValues.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}
	if v.TTL != nil {
		w, err = wire.NewValueI64(*(v.TTL)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 3, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a UpsertRequest struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a UpsertRequest struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v UpsertRequest
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *UpsertRequest) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TStruct {
				v.Ref, err = _SchemaRef_Read(field.Value)
				if err != nil {
					return err
				}

			}
		case 2:
			if field.Value.Type() == wire.TMap {
				v.EntityValues, err = _FieldValueMap_Read(field.Value)
				if err != nil {
					return err
				}

			}
		case 3:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.TTL = &x
				if err != nil {
					return err
				}

			}
		}
	}

	return nil
}

// String returns a readable string representation of a UpsertRequest
// struct.
func (v *UpsertRequest) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [3]string
	i := 0
	if v.Ref != nil {
		fields[i] = fmt.Sprintf("Ref: %v", v.Ref)
		i++
	}
	if v.EntityValues != nil {
		fields[i] = fmt.Sprintf("EntityValues: %v", v.EntityValues)
		i++
	}
	if v.TTL != nil {
		fields[i] = fmt.Sprintf("TTL: %v", *(v.TTL))
		i++
	}

	return fmt.Sprintf("UpsertRequest{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this UpsertRequest match the
// provided UpsertRequest.
//
// This function performs a deep comparison.
func (v *UpsertRequest) Equals(rhs *UpsertRequest) bool {
	if !((v.Ref == nil && rhs.Ref == nil) || (v.Ref != nil && rhs.Ref != nil && v.Ref.Equals(rhs.Ref))) {
		return false
	}
	if !((v.EntityValues == nil && rhs.EntityValues == nil) || (v.EntityValues != nil && rhs.EntityValues != nil && v.EntityValues.Equals(rhs.EntityValues))) {
		return false
	}
	if !_I64_EqualsPtr(v.TTL, rhs.TTL) {
		return false
	}

	return true
}

// GetTTL returns the value of TTL if it is set or its
// zero value if it is unset.
func (v *UpsertRequest) GetTTL() (o int64) {
	if v.TTL != nil {
		return *v.TTL
	}

	return
}

type UpsertSchemaRequest struct {
	Scope      *string             `json:"scope,omitempty"`
	NamePrefix *string             `json:"namePrefix,omitempty"`
	EntityDefs []*EntityDefinition `json:"entityDefs,omitempty"`
	DryRun     *bool               `json:"dryRun,omitempty"`
}

// ToWire translates a UpsertSchemaRequest struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *UpsertSchemaRequest) ToWire() (wire.Value, error) {
	var (
		fields [4]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Scope != nil {
		w, err = wire.NewValueString(*(v.Scope)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	if v.NamePrefix != nil {
		w, err = wire.NewValueString(*(v.NamePrefix)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}
	if v.EntityDefs != nil {
		w, err = wire.NewValueList(_List_EntityDefinition_ValueList(v.EntityDefs)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 3, Value: w}
		i++
	}
	if v.DryRun != nil {
		w, err = wire.NewValueBool(*(v.DryRun)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 4, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a UpsertSchemaRequest struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a UpsertSchemaRequest struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v UpsertSchemaRequest
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *UpsertSchemaRequest) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Scope = &x
				if err != nil {
					return err
				}

			}
		case 2:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.NamePrefix = &x
				if err != nil {
					return err
				}

			}
		case 3:
			if field.Value.Type() == wire.TList {
				v.EntityDefs, err = _List_EntityDefinition_Read(field.Value.GetList())
				if err != nil {
					return err
				}

			}
		case 4:
			if field.Value.Type() == wire.TBool {
				var x bool
				x, err = field.Value.GetBool(), error(nil)
				v.DryRun = &x
				if err != nil {
					return err
				}

			}
		}
	}

	return nil
}

// String returns a readable string representation of a UpsertSchemaRequest
// struct.
func (v *UpsertSchemaRequest) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [4]string
	i := 0
	if v.Scope != nil {
		fields[i] = fmt.Sprintf("Scope: %v", *(v.Scope))
		i++
	}
	if v.NamePrefix != nil {
		fields[i] = fmt.Sprintf("NamePrefix: %v", *(v.NamePrefix))
		i++
	}
	if v.EntityDefs != nil {
		fields[i] = fmt.Sprintf("EntityDefs: %v", v.EntityDefs)
		i++
	}
	if v.DryRun != nil {
		fields[i] = fmt.Sprintf("DryRun: %v", *(v.DryRun))
		i++
	}

	return fmt.Sprintf("UpsertSchemaRequest{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this UpsertSchemaRequest match the
// provided UpsertSchemaRequest.
//
// This function performs a deep comparison.
func (v *UpsertSchemaRequest) Equals(rhs *UpsertSchemaRequest) bool {
	if !_String_EqualsPtr(v.Scope, rhs.Scope) {
		return false
	}
	if !_String_EqualsPtr(v.NamePrefix, rhs.NamePrefix) {
		return false
	}
	if !((v.EntityDefs == nil && rhs.EntityDefs == nil) || (v.EntityDefs != nil && rhs.EntityDefs != nil && _List_EntityDefinition_Equals(v.EntityDefs, rhs.EntityDefs))) {
		return false
	}
	if !_Bool_EqualsPtr(v.DryRun, rhs.DryRun) {
		return false
	}

	return true
}

// GetScope returns the value of Scope if it is set or its
// zero value if it is unset.
func (v *UpsertSchemaRequest) GetScope() (o string) {
	if v.Scope != nil {
		return *v.Scope
	}

	return
}

// GetNamePrefix returns the value of NamePrefix if it is set or its
// zero value if it is unset.
func (v *UpsertSchemaRequest) GetNamePrefix() (o string) {
	if v.NamePrefix != nil {
		return *v.NamePrefix
	}

	return
}

// GetDryRun returns the value of DryRun if it is set or its
// zero value if it is unset.
func (v *UpsertSchemaRequest) GetDryRun() (o bool) {
	if v.DryRun != nil {
		return *v.DryRun
	}

	return
}

type UpsertSchemaResponse struct {
	Version *int32  `json:"version,omitempty"`
	Status  *string `json:"status,omitempty"`
}

// ToWire translates a UpsertSchemaResponse struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *UpsertSchemaResponse) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Version != nil {
		w, err = wire.NewValueI32(*(v.Version)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	if v.Status != nil {
		w, err = wire.NewValueString(*(v.Status)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a UpsertSchemaResponse struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a UpsertSchemaResponse struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v UpsertSchemaResponse
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *UpsertSchemaResponse) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TI32 {
				var x int32
				x, err = field.Value.GetI32(), error(nil)
				v.Version = &x
				if err != nil {
					return err
				}

			}
		case 2:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Status = &x
				if err != nil {
					return err
				}

			}
		}
	}

	return nil
}

// String returns a readable string representation of a UpsertSchemaResponse
// struct.
func (v *UpsertSchemaResponse) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [2]string
	i := 0
	if v.Version != nil {
		fields[i] = fmt.Sprintf("Version: %v", *(v.Version))
		i++
	}
	if v.Status != nil {
		fields[i] = fmt.Sprintf("Status: %v", *(v.Status))
		i++
	}

	return fmt.Sprintf("UpsertSchemaResponse{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this UpsertSchemaResponse match the
// provided UpsertSchemaResponse.
//
// This function performs a deep comparison.
func (v *UpsertSchemaResponse) Equals(rhs *UpsertSchemaResponse) bool {
	if !_I32_EqualsPtr(v.Version, rhs.Version) {
		return false
	}
	if !_String_EqualsPtr(v.Status, rhs.Status) {
		return false
	}

	return true
}

// GetVersion returns the value of Version if it is set or its
// zero value if it is unset.
func (v *UpsertSchemaResponse) GetVersion() (o int32) {
	if v.Version != nil {
		return *v.Version
	}

	return
}

// GetStatus returns the value of Status if it is set or its
// zero value if it is unset.
func (v *UpsertSchemaResponse) GetStatus() (o string) {
	if v.Status != nil {
		return *v.Status
	}

	return
}

type Value struct {
	ElemValue *RawValue `json:"elemValue,omitempty"`
}

// ToWire translates a Value struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *Value) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.ElemValue != nil {
		w, err = v.ElemValue.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}

	if i != 1 {
		return wire.Value{}, fmt.Errorf("Value should have exactly one field: got %v fields", i)
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _RawValue_Read(w wire.Value) (*RawValue, error) {
	var v RawValue
	err := v.FromWire(w)
	return &v, err
}

// FromWire deserializes a Value struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a Value struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v Value
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *Value) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TStruct {
				v.ElemValue, err = _RawValue_Read(field.Value)
				if err != nil {
					return err
				}

			}
		}
	}

	count := 0
	if v.ElemValue != nil {
		count++
	}
	if count != 1 {
		return fmt.Errorf("Value should have exactly one field: got %v fields", count)
	}

	return nil
}

// String returns a readable string representation of a Value
// struct.
func (v *Value) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [1]string
	i := 0
	if v.ElemValue != nil {
		fields[i] = fmt.Sprintf("ElemValue: %v", v.ElemValue)
		i++
	}

	return fmt.Sprintf("Value{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this Value match the
// provided Value.
//
// This function performs a deep comparison.
func (v *Value) Equals(rhs *Value) bool {
	if !((v.ElemValue == nil && rhs.ElemValue == nil) || (v.ElemValue != nil && rhs.ElemValue != nil && v.ElemValue.Equals(rhs.ElemValue))) {
		return false
	}

	return true
}
